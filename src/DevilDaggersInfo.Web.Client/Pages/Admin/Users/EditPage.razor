@page "/admin/users/edit/{Id:int}"
@using DevilDaggersInfo.Web.ApiSpec.Admin.Players
@using DevilDaggersInfo.Web.ApiSpec.Admin.Users
@using DevilDaggersInfo.Web.Client.Components
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Components.Input
@using DevilDaggersInfo.Web.Client.Enums
@using DevilDaggersInfo.Web.Client.StateObjects.Admin.Users
@using DevilDaggersInfo.Web.Core.Claims
@using System.Security.Cryptography
@inherits BaseAdminPage

<AdminAuthorizer Base="this" RequiredRole="@Roles.Players">
	<Heading Title="Admin - Edit User" />

	<Heading Title="Assign Player" Level="2" />

	@if (_assignPlayerErrorMessage != null)
	{
		<ResultBar Title="Failed to assign player" ResultBarType="ResultBarType.FatalError" DismissEvent="@(() => Dismiss(ref _assignPlayerErrorMessage))">
			@_assignPlayerErrorMessage
		</ResultBar>
	}

	<EditForm Model="@AssignPlayerState" OnValidSubmit="@AssignPlayerAsync">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<InputWrapper Label="Player"><SearchDropdown TKey="int" Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@AssignPlayerState.PlayerId" /></InputWrapper>

		<button class="btn btn-gray p-1" type="submit">Assign player</button>
	</EditForm>

	<Heading Title="Reset Password" Level="2" />

	@if (_resetPasswordErrorMessage != null)
	{
		<ResultBar Title="Failed to reset password" ResultBarType="ResultBarType.FatalError" DismissEvent="@(() => Dismiss(ref _resetPasswordErrorMessage))">
			@_resetPasswordErrorMessage
		</ResultBar>
	}

	<button class="btn btn-gray p-1" @onclick="() => ResetPasswordState.NewPassword = GeneratePassword()">Generate random</button>

	<EditForm Model="@ResetPasswordState" OnValidSubmit="@ResetPasswordAsync">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="grid gap-2 grid-cols-2 max-w-md">
			<span>Password</span>
			<input class="bg-black border-gray-3 border-2" @bind="@ResetPasswordState.NewPassword" />
		</div>

		<button class="btn btn-gray p-1" type="submit">Reset password</button>
	</EditForm>

	@if (_toggleRoleErrorMessage != null)
	{
		<ResultBar Title="Failed to toggle role" ResultBarType="ResultBarType.FatalError" DismissEvent="@(() => Dismiss(ref _toggleRoleErrorMessage))">
			@_toggleRoleErrorMessage
		</ResultBar>
	}

	<Heading Title="Roles" Level="2" />

	@if (_getUser == null)
	{
		<Loading />
	}
	else
	{
		List<(string RoleName, bool IsEnabled)> data =
		[
			(Roles.Admin, _getUser.IsAdmin),
			(Roles.CustomLeaderboards, _getUser.IsCustomLeaderboardsMaintainer),
			(Roles.Mods, _getUser.IsModsMaintainer),
			(Roles.Players, _getUser.IsPlayersMaintainer),
			(Roles.Spawnsets, _getUser.IsSpawnsetsMaintainer),
		];
		foreach ((string roleName, bool isEnabled) in data)
		{
			<div>
				<button @onclick="@(() => ToggleRoleAsync(roleName))" class="btn @(GetRoleButtonColor(isEnabled)) p-1">@(GetRoleButtonText(isEnabled)) @(roleName)</button>
			</div>
		}
	}
</AdminAuthorizer>

@code
{
	private Dictionary<int, string>? _playerNames;
	private GetUser? _getUser;
	private string? _assignPlayerErrorMessage;
	private string? _resetPasswordErrorMessage;
	private string? _toggleRoleErrorMessage;

	[Parameter]
	[EditorRequired]
	public int Id { get; set; }

	[Parameter]
	public AssignPlayerState AssignPlayerState { get; set; } = new();

	[Parameter]
	public ResetPasswordState ResetPasswordState { get; set; } = new();

	private static string GetRoleButtonText(bool isEnabled)
	{
		return isEnabled ? "Disable" : "Enable";
	}

	private static string GetRoleButtonColor(bool isEnabled)
	{
		return isEnabled ? "btn-red" : "btn-green";
	}

	private static string GeneratePassword()
	{
		// ReSharper disable StringLiteralTypo
		return RandomNumberGenerator.GetString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", 20);
		// ReSharper restore StringLiteralTypo
	}

	private void Dismiss(ref string? errorMessage)
	{
		errorMessage = null;
		StateHasChanged();
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			_getUser = await Http.GetUserById(Id);
			AssignPlayerState.PlayerId = _getUser.PlayerId ?? 0;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task AssignPlayerAsync()
	{
		_assignPlayerErrorMessage = null;

		try
		{
			HttpResponseMessage hrm = await Http.AssignPlayer(Id, AssignPlayerState.ToModel());

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/users");
			else
				_assignPlayerErrorMessage = $"{hrm.StatusCode} {await hrm.Content.ReadAsStringAsync()}";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task ResetPasswordAsync()
	{
		_resetPasswordErrorMessage = null;

		try
		{
			HttpResponseMessage hrm = await Http.ResetPasswordForUserById(Id, ResetPasswordState.ToModel());

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/users");
			else
				_resetPasswordErrorMessage = $"{hrm.StatusCode} {await hrm.Content.ReadAsStringAsync()}";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task ToggleRoleAsync(string roleName)
	{
		_toggleRoleErrorMessage = null;

		try
		{
			HttpResponseMessage hrm = await Http.ToggleRole(Id, new() { RoleName = roleName });

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/users");
			else
				_toggleRoleErrorMessage = $"{hrm.StatusCode} {await hrm.Content.ReadAsStringAsync()}";
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
