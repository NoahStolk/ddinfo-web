@page "/admin/spawnsets"
@inherits BaseAdminPage
@using DevilDaggersInfo.Core.Common
@using DevilDaggersInfo.Web.ApiSpec.Admin.Spawnsets
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Core.Claims

<AdminAuthorizer Base="this" RequiredRole="@Roles.Spawnsets">
	<AdminOverview
		@ref="_overview"
		TGetDto="GetSpawnsetForOverview"
		TSorting="SpawnsetSorting"
		Title="Admin - Spawnsets"
		ApiCall="Http.GetSpawnsets"
		DeletionApiCall="(int id) => Http.DeleteSpawnsetById(id)"
		Columns="_columns" />
</AdminAuthorizer>

@code
{
	// ! Blazor ref.
	private AdminOverview<GetSpawnsetForOverview, SpawnsetSorting> _overview = null!;

	private readonly List<AdminOverviewColumn<GetSpawnsetForOverview, SpawnsetSorting>> _columns =
	[
		new(SpawnsetSorting.Id, "Id", d => d.Id, TextAlign.Right),
		new(SpawnsetSorting.Name, "Name", d => d.Name, TextAlign.Left),
		new(SpawnsetSorting.Author, "Author", d => d.Author, TextAlign.Left),
		new(SpawnsetSorting.MaxDisplayWaves, "Max display waves", d => d.MaxDisplayWaves, TextAlign.Right),
		new(SpawnsetSorting.HtmlDescription, "HTML description", d => d.HtmlDescription, TextAlign.Left),
		new(SpawnsetSorting.LastUpdated, "Last updated", d => d.LastUpdated.ToString(StringFormats.DateFormat), TextAlign.Left),
		new(SpawnsetSorting.IsPractice, "Practice", d => d.IsPractice, TextAlign.Left),
	];
}
