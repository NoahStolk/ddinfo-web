@page "/admin/custom-entries"
@inherits BaseAdminPage
@using DevilDaggersInfo.Core.Common
@using DevilDaggersInfo.Web.ApiSpec.Admin.CustomEntries
@using Microsoft.AspNetCore.Components.QuickGrid

<div class="grid">
    <QuickGrid Items="@FilteredItems" Pagination="@_pagination">
        <PropertyColumn Property="@(ce => ce.Id)" Sortable="true" />
        <PropertyColumn Property="@(ce => ce.SpawnsetName)" Sortable="true" Align="Align.Left" Class="search-box-name">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="_spawnsetNameFilter" @bind:event="oninput" placeholder="Spawnset name..." />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(ce => ce.PlayerName)" Sortable="true" Align="Align.Left">
	        <ColumnOptions>
		        <div class="search-box">
			        <input type="search" autofocus @bind="_playerNameFilter" @bind:event="oninput" placeholder="Player name..." />
		        </div>
	        </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(ce => ce.Time)" Sortable="true" Align="Align.Right" Format="@StringFormats.TimeFormat" />
        <PropertyColumn Property="@(ce => ce.GemsCollected)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.GemsDespawned)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.GemsEaten)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.GemsTotal)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.EnemiesKilled)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.EnemiesAlive)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.DaggersFired)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.DaggersHit)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.HomingStored)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.HomingEaten)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Property="@(ce => ce.DeathType)" Sortable="true" Align="Align.Left" />
        <PropertyColumn Property="@(ce => ce.LevelUpTime2)" Sortable="true" Align="Align.Right" Format="@StringFormats.TimeFormat" />
        <PropertyColumn Property="@(ce => ce.LevelUpTime3)" Sortable="true" Align="Align.Right" Format="@StringFormats.TimeFormat" />
        <PropertyColumn Property="@(ce => ce.LevelUpTime4)" Sortable="true" Align="Align.Right" Format="@StringFormats.TimeFormat" />
        <PropertyColumn Property="@(ce => ce.SubmitDate)" Sortable="true" Align="Align.Left" Format="@StringFormats.DateTimeUtcFormat" />
        <PropertyColumn Property="@(ce => ce.ClientVersion)" Sortable="true" Align="Align.Right" />
    </QuickGrid>
</div>

<Paginator State="@_pagination" />

@code
{
	private readonly PaginationState _pagination = new() { ItemsPerPage = 25 };

	private IQueryable<GetCustomEntryForOverview>? _itemsQueryable;
	private string _spawnsetNameFilter = string.Empty;
	private string _playerNameFilter = string.Empty;

	IQueryable<GetCustomEntryForOverview>? FilteredItems => _itemsQueryable?
		.Where(ce =>
			ce.SpawnsetName.Contains(_spawnsetNameFilter, StringComparison.CurrentCultureIgnoreCase) &&
			ce.PlayerName.Contains(_playerNameFilter, StringComparison.CurrentCultureIgnoreCase));

	protected override async Task OnInitializedAsync()
	{
		List<GetCustomEntryForOverview> customEntries = await Http.GetCustomEntries();
		_itemsQueryable = customEntries.AsQueryable();
	}
}
