@page "/admin/donations/edit/{Id:int}"
@inherits BaseAdminPage
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Components.Input
@using DevilDaggersInfo.Web.Client.Enums
@using DevilDaggersInfo.Web.Client.StateObjects.Admin.Donations
@using DevilDaggersInfo.Web.Core.Claims
@using DevilDaggersInfo.Web.ApiSpec.Admin.Donations
@using DevilDaggersInfo.Web.ApiSpec.Admin.Players

<AdminAuthorizer Base="this" RequiredRole="@Roles.Admin">
	<AdminEdit TStateObject="EditDonationState" TModel="EditDonation" Name="Donation" OverviewUrl="/admin/donations" ApiCall="Http.EditDonationById" StateObject="_editDonationState" Id="Id" OnPopulate="async ec => await PopulateAsync(ec)">
		<InputWrapper Label="Player"><SearchDropdown TKey="int" Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@_editDonationState.PlayerId" /></InputWrapper>
		<InputWrapper Label="Amount"><InputNumber class="admin-input" @bind-Value="_editDonationState.Amount" /></InputWrapper>
		<InputWrapper Label="Currency"><SearchDropdown TKey="Currency" Values="@(Enum.GetValues<Currency>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<Currency>(s)" @bind-Value="@_editDonationState.Currency" /></InputWrapper>
		<InputWrapper Label="ConvertedEuroCentsReceived"><InputNumber class="admin-input" @bind-Value="_editDonationState.ConvertedEuroCentsReceived" /></InputWrapper>
		<InputWrapper Label="Note"><InputTextArea class="admin-input" @bind-Value="@_editDonationState.Note" /></InputWrapper>
		<InputWrapper Label="Refunded"><InputCheckbox @bind-Value="@_editDonationState.IsRefunded" /></InputWrapper>
	</AdminEdit>
</AdminAuthorizer>

@code
{
	private Dictionary<int, string>? _playerNames;
	private readonly EditDonationState _editDonationState = new();

	[Parameter]
	[EditorRequired]
	public int Id { get; set; }

	private async Task PopulateAsync(AdminEdit<EditDonationState, EditDonation> editComponent)
	{
		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			GetDonation getDonation = await Http.GetDonationById(Id);
			_editDonationState.Amount = getDonation.Amount;
			_editDonationState.ConvertedEuroCentsReceived = getDonation.ConvertedEuroCentsReceived;
			_editDonationState.Currency = getDonation.Currency;
			_editDonationState.IsRefunded = getDonation.IsRefunded;
			_editDonationState.Note = getDonation.Note;
			_editDonationState.PlayerId = getDonation.PlayerId;

			editComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			editComponent.ErrorMessage = ex.StatusCode.HasValue ? $"Error {(int)ex.StatusCode}: {ex.StatusCode}" : "An error occurred while sending the request.";

			editComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
