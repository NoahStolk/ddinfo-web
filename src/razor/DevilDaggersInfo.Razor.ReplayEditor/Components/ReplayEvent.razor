@using DevilDaggersInfo.Core.Replay.Events
@using DevilDaggersInfo.Core.Replay.Events.Interfaces
@using DevilDaggersInfo.Razor.ReplayEditor.Components.Events
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using Fluxor
@inject IState<ReplayBinaryState> ReplayBinaryState

@switch (Event)
{
	case BoidSpawnEvent boidSpawnEvent:
		<BoidSpawnEventViewer Event="@boidSpawnEvent" />
		break;
	case DaggerSpawnEvent daggerSpawnEvent:
		<DaggerSpawnEventViewer Event="@daggerSpawnEvent" />
		break;
	case DeathEvent deathEvent:
		<DeathEventViewer Event="@deathEvent" />
		break;
	case EntityOrientationEvent entityOrientationEvent:
		<EntityOrientationEventViewer Event="@entityOrientationEvent" />
		break;
	case EntityPositionEvent entityPositionEvent:
		<EntityPositionEventViewer Event="@entityPositionEvent" />
		break;
	case EntityTargetEvent entityTargetEvent:
		<EntityTargetEventViewer Event="@entityTargetEvent" />
		break;
	case GemEvent:
		<GemEventViewer />
		break;
	case HitEvent hitEvent:
		<HitEventViewer Event="@hitEvent" />
		break;
	case LeviathanSpawnEvent leviathanSpawnEvent:
		<LeviathanSpawnEventViewer Event="@leviathanSpawnEvent" />
		break;
	case PedeSpawnEvent pedeSpawnEvent:
		<PedeSpawnEventViewer Event="@pedeSpawnEvent" />
		break;
	case SpiderEggSpawnEvent spiderEggSpawnEvent:
		<SpiderEggSpawnEventViewer Event="@spiderEggSpawnEvent" />
		break;
	case SpiderSpawnEvent spiderSpawnEvent:
		<SpiderSpawnEventViewer Event="@spiderSpawnEvent" />
		break;
	case SquidSpawnEvent squidSpawnEvent:
		<SquidSpawnEventViewer Event="@squidSpawnEvent" />
		break;
	case ThornSpawnEvent thornSpawnEvent:
		<ThornSpawnEventViewer Event="@thornSpawnEvent" />
		break;
	case TransmuteEvent transmuteEvent:
		<TransmuteEventViewer Event="@transmuteEvent" />
		break;
	default:
		<span>@Event.ToString()</span>
		break;
}

@code
{
	[Parameter]
	[EditorRequired]
	public IEvent Event { get; set; } = null!;
}
