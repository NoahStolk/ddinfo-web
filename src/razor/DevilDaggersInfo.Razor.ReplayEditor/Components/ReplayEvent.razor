@using DevilDaggersInfo.Core.Replay.Events
@using DevilDaggersInfo.Core.Replay.Events.Interfaces
@using DevilDaggersInfo.Razor.ReplayEditor.Components.Events
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using Fluxor
@inject IState<ReplayBinaryState> ReplayBinaryState

@if (Event is BoidSpawnEvent boidSpawnEvent)
{
	<BoidSpawnEventViewer Event="boidSpawnEvent" />
}
else if (Event is DaggerSpawnEvent daggerSpawnEvent)
{
	<DaggerSpawnEventViewer Event="daggerSpawnEvent" />
}
else if (Event is DeathEvent deathEvent)
{
	<DeathEventViewer Event="deathEvent" />
}
else if (Event is EntityOrientationEvent entityOrientationEvent)
{
	<EntityOrientationEventViewer Event="entityOrientationEvent" />
}
else if (Event is EntityPositionEvent entityPositionEvent)
{
	<EntityPositionEventViewer Event="entityPositionEvent" />
}
else if (Event is EntityTargetEvent entityTargetEvent)
{
	<EntityTargetEventViewer Event="entityTargetEvent" />
}
else if (Event is GemEvent)
{
	<GemEventViewer />
}
else if (Event is HitEvent hitEvent)
{
	<HitEventViewer Event="hitEvent" />
}
else if (Event is LeviathanSpawnEvent leviathanSpawnEvent)
{
	<LeviathanSpawnEventViewer Event="leviathanSpawnEvent" />
}
else if (Event is PedeSpawnEvent pedeSpawnEvent)
{
	<PedeSpawnEventViewer Event="pedeSpawnEvent" />
}
else if (Event is SpiderEggSpawnEvent spiderEggSpawnEvent)
{
	<SpiderEggSpawnEventViewer Event="spiderEggSpawnEvent" />
}
else if (Event is SpiderSpawnEvent spiderSpawnEvent)
{
	<SpiderSpawnEventViewer Event="spiderSpawnEvent" />
}
else if (Event is SquidSpawnEvent squidSpawnEvent)
{
	<SquidSpawnEventViewer Event="squidSpawnEvent" />
}
else if (Event is ThornSpawnEvent thornSpawnEvent)
{
	<ThornSpawnEventViewer Event="thornSpawnEvent" />
}
else if (Event is TransmuteEvent transmuteEvent)
{
	<TransmuteEventViewer Event="transmuteEvent" />
}
else
{
	<span>@Event.ToString()</span>
}

@code
{
	[Parameter]
	[EditorRequired]
	public IEvent Event { get; set; } = null!;
}
