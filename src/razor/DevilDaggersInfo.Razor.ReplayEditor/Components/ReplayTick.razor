@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Types.Core.Replays
@using DevilDaggersInfo.Core.Replay.Events
@using DevilDaggersInfo.Core.Replay.Events.Interfaces
@using DevilDaggersInfo.Razor.ReplayEditor.Services
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using Fluxor
@inject StateFacade StateFacade
@inject IState<ReplayEditorState> ReplayEditorState

@{
	IInputsEvent? input = Events.FirstOrDefault(e => e is InputsEvent or InitialInputsEvent) as IInputsEvent;
	int eventCount = Events.Count(e => !HideActualEvent(e));
	string eventsString = eventCount == 1 ? "event" : "events";
}

<div class="grid gap-4 grid-cols-12 max-w-[1366px]">
	<span class="text-right">@TickIndex</span>
	<span class="text-right">@((TickIndex / 60f).ToString(StringFormats.TimeFormat))</span>

	<div class="col-span-10">
		@if (input != null)
		{
			<span class="@(input.Forward ? "text-red" : null)">W</span>
			<span class="@(input.Left ? "text-red" : null)">A</span>
			<span class="@(input.Backward ? "text-red" : null)">S</span>
			<span class="@(input.Right ? "text-red" : null)">D</span>
			<span class="@GetJumpColor(input.Jump)">[Jump]</span>
			<span class="@GetShootColor(input.Shoot)">L</span>
			<span class="@GetShootColor(input.ShootHoming)">R</span>
			<span class="@(input.MouseX != 0 ? "text-red" : null)">X: @input.MouseX</span>
			<span class="@(input.MouseY != 0 ? "text-red" : null)">Y: @input.MouseY</span>

			@if (input is InitialInputsEvent initial)
			{
				<br />
				<span>LookSpeed: @((initial.LookSpeed).ToString("0.00000")) (@((initial.LookSpeed * 500 / 3).ToString("0.00")))</span>
			}
		}
		else if (Events.Any(e => e is EndEvent))
		{
			<span class="text-red">End of replay</span>
		}

		<div>
			@foreach (IEvent e in Events)
			{
				if (HideActualEvent(e))
					continue;

				<ReplayEvent Event="e" />
			}
		</div>
	</div>
</div>

@code
{
	[Parameter]
	[EditorRequired]
	public int TickIndex { get; set; }

	[Parameter]
	[EditorRequired]
	public List<IEvent> Events { get; set; } = null!;

	private static string? GetJumpColor(JumpType jumpType) => jumpType switch
	{
		JumpType.StartedPress => "text-red",
		JumpType.Hold => "text-orange",
		_ => null,
	};

	private static string? GetShootColor(ShootType shootType) => shootType switch
	{
		ShootType.Release => "text-red",
		ShootType.Hold => "text-orange",
		_ => null,
	};

	private static bool HideActualEvent(IEvent e)
		=> e is IInputsEvent or EndEvent;
}
