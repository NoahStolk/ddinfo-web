@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Core.Replay.Extensions
@using DevilDaggersInfo.Core.Replay.PostProcessing.HitLog
@using DevilDaggersInfo.Core.Replay.PostProcessing.Timeline
@using DevilDaggersInfo.Razor.ReplayEditor.Services
@using DevilDaggersInfo.Razor.ReplayEditor.Store.State
@using DevilDaggersInfo.Razor.ReplayEditor.Utils
@using Fluxor
@inherits FluxorComponent
@inject IState<ReplayBinaryState> ReplayBinaryState
@inject StateFacade StateFacade

<button @onclick="Build">Build timelines (may take a few seconds for large replays)</button>

<div>
	<label>Entity ID:</label>
	<input class="bg-black p-1" type="text" @bind="_entityId" />
	<button class="btn btn-gray" @onclick="ShowLog">Show log for specific enemy entity ID</button>
</div>

@if (_timelines != null)
{
	<h2>@_currentTick (@((_currentTick / 60f).ToString(StringFormats.TimeFormat)))</h2>
	<input class="w-full slider" type="range" min="0" max="@ReplayBinaryState.Value.ReplayBinary.EventsData.TickCount" step="1" @bind="@_currentTick" @bind:event="oninput" />

	<div class="max-w-lg bg-gray-2">
		<div class="grid gap-x-1 grid-cols-2">
			<span class="font-bold">Entity</span>
			<span class="font-bold">HP</span>

			@{
				int amount = 0;
				foreach (EnemyTimeline timeline in _timelines.OrderByDescending(t => t.EntityId))
				{
					if (amount > 50)
						continue;

					int? hp = timeline.GetHp(_currentTick);
					if (!hp.HasValue)
						continue;

					amount++;
					<span>@MarkupUtils.EntityType(timeline.EntityId, ReplayBinaryState.Value.ReplayBinary.EventsData.EntityTypes)</span>
					if (hp <= 0)
					{
						<span class="text-red">Dead</span>
					}
					else
					{
						<span>@hp</span>
					}
				}
			}
		</div>
	</div>
}

@if (_log != null)
{
	<span>@MarkupUtils.EntityType(_entityId, ReplayBinaryState.Value.ReplayBinary.EventsData.EntityTypes)</span>

	<div class="max-w-xl bg-gray-2">
		<div class="grid gap-x-1 grid-cols-6">
			<span class="font-bold">Tick</span>
			<span class="font-bold">Time</span>
			<span class="font-bold">HP</span>
			<span class="font-bold">Damage</span>
			<span class="font-bold">Dagger Type</span>
			<span class="font-bold">User Data</span>

			<span>@_log.SpawnTick</span>
			<span>@((_log.SpawnTick / 60f).ToString(StringFormats.TimeFormat))</span>
			<span>@_log.EntityType.GetInitialHp()</span>
			<span>-</span>
			<span>-</span>
			<span>-</span>

			@foreach (EnemyHitLogEvent e in _log.Hits)
			{
				<span>@e.Tick</span>
				<span>@((e.Tick / 60f).ToString(StringFormats.TimeFormat))</span>
				if (e.Hp <= 0)
				{
					<span class="text-red">Dead (@e.Hp)</span>
				}
				else
				{
					<span>@e.Hp</span>
				}
				<span>@e.Damage</span>
				<span>@e.DaggerType</span>
				<span>@e.UserData</span>
			}
		</div>
	</div>
}

@code {
	// TODO: Use Flux state.
	private int _currentTick;
	private List<EnemyTimeline>? _timelines;

	private int _entityId;
	private EnemyHitLog? _log;

	private void Build()
	{
		EnemyTimelineBuilder builder = new();
		_timelines = builder.Build(ReplayBinaryState.Value.ReplayBinary.EventsData.Events);
	}

	private void ShowLog()
	{
		_log = EnemyHitLogBuilder.Build(ReplayBinaryState.Value.ReplayBinary.EventsData.Events, _entityId);
	}
}
