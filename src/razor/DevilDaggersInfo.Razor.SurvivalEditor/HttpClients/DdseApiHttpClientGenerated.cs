// <auto-generated>
// This code was generated by DevilDaggersInfo.
// </auto-generated>

#pragma warning disable CS0105, CS1591, CS8618, RCS1214, S1128, SA1001, SA1027, SA1028, SA1101, SA1122, SA1137, SA1200, SA1201, SA1208, SA1210, SA1309, SA1311, SA1413, SA1503, SA1505, SA1507, SA1508, SA1516, SA1600, SA1601, SA1602, SA1623, SA1649

#nullable enable

using DevilDaggersInfo.Api.Ddse.Spawnsets;
using System.Net.Http.Json;

namespace DevilDaggersInfo.Razor.SurvivalEditor.HttpClients;

public partial class DdseApiHttpClient
{
	public async Task<List<GetSpawnsetDdse>> GetSpawnsets(string? authorFilter, string? nameFilter)
	{
		Dictionary<string, object?> queryParameters = new()
		{
			{ nameof(authorFilter), authorFilter },
			{ nameof(nameFilter), nameFilter }
		};
		return await SendGetRequest<List<GetSpawnsetDdse>>(BuildUrlWithQuery($"api/ddse/spawnsets/", queryParameters));
	}

	public async Task<List<GetSpawnsetDdse>> GetSpawnsetsObsolete(string? authorFilter, string? nameFilter)
	{
		Dictionary<string, object?> queryParameters = new()
		{
			{ nameof(authorFilter), authorFilter },
			{ nameof(nameFilter), nameFilter }
		};
		return await SendGetRequest<List<GetSpawnsetDdse>>(BuildUrlWithQuery($"/api/spawnsets/ddse", queryParameters));
	}

	public async Task<Task> GetSpawnsetFile(string fileName)
	{
		return await SendGetRequest<Task>($"api/ddse/spawnsets/{fileName}/file");
	}

	private static string BuildUrlWithQuery(string baseUrl, Dictionary<string, object?> queryParameters)
	{
		if (queryParameters.Count == 0)
			return baseUrl;

		string queryParameterString = string.Join('&', queryParameters.Select(kvp => $"{kvp.Key}={kvp.Value}"));
		return $"{baseUrl.TrimEnd('/')}?{queryParameterString}";
	}
}

