@page "/"
@using DevilDaggersInfo.App.Core.GameMemory
@using DevilDaggersInfo.Razor.Core.CanvasArena.Components
@using DevilDaggersInfo.Razor.CustomLeaderboard.Services
@using DevilDaggersInfo.Razor.CustomLeaderboard.Store.State
@using Fluxor
@inject GameMemoryService GameMemoryService
@inject IState<RecorderState> RecorderState
@inject IState<SpawnsetState> SpawnsetState
@inject NetworkService NetworkService
@inject IClientConfiguration ClientConfiguration

@inherits FluxorComponent

<div class="grid grid-cols-4 m-2 p-2 border-solid border-2 border-[#811]">
	<div>
		@*TODO: Use Fluxor state and use separate component.*@
		<div class="grid grid-cols-2 m-2 p-2 border-solid border-2 border-[#114]">
			<span>Devil Daggers process</span>
			<span>@(GameMemoryService.HasProcess ? "Attached" : "Waiting...")</span>

			<span>Memory initialized</span>
			<span>@(GameMemoryService.IsInitialized ? "Done" : "Waiting...")</span>

			<span>State</span>
			<span>@RecorderState.Value.State</span>
		</div>

		<div class="m-2 p-2 border-solid border-2 border-[#411]">
			<Recording />
		</div>

		<div class="m-2 p-2 border-solid border-2 border-[#411]">
			<Submission />
		</div>
	</div>

	<div class="col-span-3 m-2 p-2 border-solid border-2 border-[#411]">
		<LeaderboardList />
	</div>
</div>

<div class="grid grid-cols-4 m-2 p-2 border-solid border-2 border-[#811]">
	<div>
		@if (SpawnsetState.Value.Spawnset != null)
		{
			<div class="max-w-arena">
				<WebViewSpawnsetArena SpawnsetBinary="SpawnsetState.Value.Spawnset" CurrentTime="0" />
			</div>
		}
	</div>
	<div class="col-span-3 min-w-[1270px] m-2 p-2 border-solid border-2 border-[#411]">
		<Leaderboard />
	</div>
</div>

@code
{
	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		long marker = await NetworkService.GetMarker(ClientConfiguration.GetOperatingSystem());
		GameMemoryService.Initialize(marker);
	}
}
