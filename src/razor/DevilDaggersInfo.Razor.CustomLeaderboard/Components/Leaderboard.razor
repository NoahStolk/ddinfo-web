@inherits FluxorComponent
@using DevilDaggersInfo.Api.Ddcl.CustomLeaderboards
@using DevilDaggersInfo.Core.Wiki
@using DevilDaggersInfo.Core.Wiki.Objects
@using DevilDaggersInfo.Razor.Core.Components
@using DevilDaggersInfo.Razor.CustomLeaderboard.Extensions
@using DevilDaggersInfo.Razor.CustomLeaderboard.Services
@using DevilDaggersInfo.Razor.CustomLeaderboard.Store.State
@using DevilDaggersInfo.Types.Core.Wiki
@using DevilDaggersInfo.Types.Web
@using Fluxor
@inject StateFacade StateFacade
@inject IState<LeaderboardState> State

@if (State.Value.Leaderboard != null)
{
	GetCustomLeaderboard leaderboard = State.Value.Leaderboard;

	<h2 class="text-xl pl-2">@leaderboard.SpawnsetName</h2>

	<div class="grid gap-x-2 grid-cols-custom-leaderboard m-2 p-2">
		<span class="font-bold text-right">Rank</span>
		<span class="font-bold col-span-2">Player</span>
		<span class="font-bold text-right">Time</span>
		<span class="font-bold text-right">Kills</span>
		<span class="font-bold text-right">Enemies Alive</span>
		<span class="font-bold text-right">Gems</span>
		<span class="font-bold text-right">Gems Despawned</span>
		<span class="font-bold text-right">Gems Eaten</span>
		<span class="font-bold text-right">Accuracy</span>
		<span class="font-bold text-center">Death</span>
		<span class="font-bold text-right">Homing Stored</span>
		<span class="font-bold text-right">Homing Eaten</span>
		<span class="font-bold text-right">Level 2</span>
		<span class="font-bold text-right">Level 3</span>
		<span class="font-bold text-right">Level 4</span>
	</div>

	@foreach (GetCustomEntry entry in leaderboard.SortedEntries)
	{
		string color = (entry.CustomLeaderboardDagger ?? CustomLeaderboardDagger.Silver).GetColorCode();
		Death death = Deaths.GetDeathByLeaderboardType(GameVersion.V3_2, entry.DeathType) ?? DeathsV3_2.Unknown;
		string style = entry.HasReplay ? "hover:bg-dark-red cursor-pointer" : "hover:bg-dark-gray";

		<div class="grid gap-x-2 grid-cols-custom-leaderboard mx-2 px-2 @style" @onclick="@(() => StateFacade.SetReplay(entry.Id))">
			<span class="text-right">@entry.Rank</span>
			<span class="col-span-2 whitespace-nowrap" style="color: @color;">@entry.PlayerName</span>
			<span class="text-right whitespace-nowrap" style="color: @color;">@entry.TimeInSeconds.ToString("N4")</span>
			<span class="text-right">@entry.EnemiesKilled</span>
			<span class="text-right">@entry.EnemiesAlive</span>
			<span class="text-right">@entry.GemsCollected</span>
			<span class="text-right">@Optional(entry.GemsDespawned)</span>
			<span class="text-right">@Optional(entry.GemsEaten)</span>
			<span class="text-right">@((entry.DaggersFired == 0 ? 0 : entry.DaggersHit / (float)entry.DaggersFired).ToString("0.00%"))</span>
			<span class="text-center" style="color: @death.Color.HexCode">@death.Name</span>
			<span class="text-right">@entry.HomingStored</span>
			<span class="text-right">@Optional(entry.HomingEaten)</span>
			<span class="text-right">@(entry.LevelUpTime2InSeconds == 0 ? "-" : entry.LevelUpTime2InSeconds.ToString("N4"))</span>
			<span class="text-right">@(entry.LevelUpTime3InSeconds == 0 ? "-" : entry.LevelUpTime3InSeconds.ToString("N4"))</span>
			<span class="text-right">@(entry.LevelUpTime4InSeconds == 0 ? "-" : entry.LevelUpTime4InSeconds.ToString("N4"))</span>
		</div>
	}
}

@code
{
	private static MarkupString Optional<T>(Nullable<T> value)
		where T : struct
	{
		return value == null ? MarkupStrings.NoDataMarkup : new MarkupString(value.ToString() ?? string.Empty);
	}
}
