@inherits FluxorComponent
@using DevilDaggersInfo.Api.Ddcl.CustomLeaderboards
@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Razor.CustomLeaderboard.Store.State
@using Fluxor
@inject IState<RecorderState> State

@if (State.Value.UploadError != null)
{
	<div class="text-2xl text-red">Upload failed</div>

	<div>@State.Value.UploadError</div>
}
else if (State.Value.UploadSuccess != null)
{
	@*TODO: Use Fluxor state for time ago.*@
	<div class="text-2xl text-green">Upload successful @FormatTimeAgo()</div>

	<div>@State.Value.UploadSuccess.Message</div>
	@*switch (State.Value.UploadSuccess.SubmissionType)
	{
		case SubmissionType.NewHighscore:
			<div>NEW HIGHSCORE!</div>
			break;
		case SubmissionType.NoHighscore:
			<div>No new highscore</div>
			break;
		case SubmissionType.FirstScore:
			<div>Welcome to the leaderboard</div>
			break;
	}*@

	@if (State.Value.UploadSuccess.SubmissionType != SubmissionType.NoHighscore)
	{
		<div class="grid grid-cols-2">
			<span>@State.Value.UploadSuccess.RankState</span>
			<span>@State.Value.UploadSuccess.TimeState</span>
			<span>@State.Value.UploadSuccess.GemsCollectedState</span>
			<span>@State.Value.UploadSuccess.EnemiesKilledState</span>
		</div>
	}
}
else
{
	<div>(Nothing uploaded)</div>
}

@code
{
	private string FormatTimeAgo()
	{
		if (!State.Value.LastSuccessfulUpload.HasValue)
			return string.Empty;

		TimeSpan diff = DateTime.Now - State.Value.LastSuccessfulUpload.Value;
		if (diff < TimeSpan.FromSeconds(5))
			return "(just now)";

		int seconds = diff.Seconds;
		if (diff < TimeSpan.FromMinutes(1))
			return $"({seconds} second{S(seconds)} ago)";

		int minutes = diff.Minutes;
		if (diff < TimeSpan.FromHours(1))
			return $"({minutes} minute{S(minutes)} ago)";

		int hours = diff.Hours;
		if (diff < TimeSpan.FromDays(1))
			return $"({hours} hour{S(hours)} and {minutes} minute{S(minutes)} ago)";

		return $"({State.Value.LastSuccessfulUpload.Value.ToString(StringFormats.DateTimeFormat)})";

		static string S(int value)
			=> value == 1 ? string.Empty : "s";
	}
}
