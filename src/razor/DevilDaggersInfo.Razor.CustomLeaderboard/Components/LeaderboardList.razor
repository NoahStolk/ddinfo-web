@inherits FluxorComponent
@using DevilDaggersInfo.Api.Ddcl
@using DevilDaggersInfo.Api.Ddcl.CustomLeaderboards
@using DevilDaggersInfo.App.Core.GameMemory
@using DevilDaggersInfo.Razor.Core.Components.Components
@using DevilDaggersInfo.Razor.CustomLeaderboard.Extensions
@using DevilDaggersInfo.Razor.CustomLeaderboard.Services
@using DevilDaggersInfo.Razor.CustomLeaderboard.Store.State
@using DevilDaggersInfo.Razor.CustomLeaderboard.Utils
@using DevilDaggersInfo.Types.Web
@using DevilDaggersInfo.Types.Web.Extensions
@using Fluxor
@inject IState<LeaderboardListState> State
@inject NetworkService NetworkService
@inject StateFacade StateFacade

<div>Select a spawnset to play</div>

<div class="h-16">
	<button class="btn bg-dark-red hover:bg-red" @onclick="@(() => StateFacade.SetPageIndex(State.Value.PageIndex - 1))">Prev</button>
	<button class="btn bg-dark-red hover:bg-red" @onclick="@(() => StateFacade.SetPageIndex(State.Value.PageIndex + 1))">Next</button>
	<SelectList CssWidthClass="w-48" CssOpenerClass="pl-2" TValue="CustomLeaderboardCategory" Values="@(Enum.GetValues<CustomLeaderboardCategory>().ToList())" DisplayFunction="@(clc => clc.ToDisplayString())" Default="CustomLeaderboardCategory.Survival" Selected="@(clc => StateFacade.SetCategory(clc))" />

	@if (State.Value.IsLoading)
	{
		<div>Loading...</div>
	}
	else if (State.Value.Error != null)
	{
		<div class="text-red">Error while fetching leaderboard overview</div>
		<div class="text-red">@State.Value.Error</div>
	}
</div>

@if (State.Value.Leaderboards != null)
{
	<div>Page @(State.Value.PageIndex + 1) of @PageUtils.GetTotalPages(State.Value.PageSize, State.Value.Leaderboards.TotalResults)</div>

	<div class="grid gap-x-2 grid-cols-5">
		<span class="font-bold">Spawnset</span>
		<span class="font-bold text-right">Rank</span>
		<span class="font-bold text-right">Score</span>
		<span class="font-bold text-right">Next dagger</span>
		<span class="font-bold text-right">World record</span>
	</div>

	@foreach (GetCustomLeaderboardForOverview leaderboard in State.Value.Leaderboards.Results)
	{

		<div class="grid gap-x-2 grid-cols-5 hover:bg-dark-red cursor-pointer" @onclick="@(() => StateFacade.SetSpawnset(leaderboard.SpawnsetId))">
			<span>@leaderboard.SpawnsetName</span>

			@if (leaderboard.SelectedPlayerStats == null)
			{
				<span class="text-right">- / @leaderboard.PlayerCount</span>
				<span class="text-right">-</span>
				<span class="text-right">-</span>
			}
			else
			{
				string? daggerColor = leaderboard.SelectedPlayerStats.Dagger?.GetColorCode();

				<span class="text-right">@leaderboard.SelectedPlayerStats.Rank / @leaderboard.PlayerCount</span>
				<span class="text-right" style="color: @daggerColor;">@leaderboard.SelectedPlayerStats.Time.ToString("N4")</span>

				@if (@leaderboard.SelectedPlayerStats.NextDagger == null)
				{
					<span class="text-right">-</span>
				}
				else
				{
					string? nextDaggerColor = leaderboard.SelectedPlayerStats.NextDagger.Dagger.GetColorCode();

					<span class="text-right" style="color: @nextDaggerColor;">@leaderboard.SelectedPlayerStats.NextDagger.Time.ToString("N4")</span>
				}
			}

			@if (leaderboard.WorldRecord == null)
			{
				<span class="text-right">-</span>
			}
			else
			{
				string? worldRecordDaggerColor = leaderboard.WorldRecord.Dagger?.GetColorCode();

				<span class="text-right" style="color: @worldRecordDaggerColor;">@leaderboard.WorldRecord.Time.ToString("N4")</span>
			}
		</div>
	}
}

@code
{
	protected override void OnInitialized()
	{
		base.OnInitialized();

		StateFacade.LoadLeaderboards();
	}
}
