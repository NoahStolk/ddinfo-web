@using DevilDaggersInfo.Api.Ddcl
@using DevilDaggersInfo.Api.Ddcl.CustomLeaderboards
@using DevilDaggersInfo.App.Core.GameMemory
@using DevilDaggersInfo.Razor.CustomLeaderboard.Extensions
@using DevilDaggersInfo.Razor.CustomLeaderboard.Models
@using DevilDaggersInfo.Razor.CustomLeaderboard.Services
@using DevilDaggersInfo.Types.Web

<div>Select a spawnset to play</div>

<button class="bg-dark-red hover:bg-red px-1" @onclick="@(() => SetPageIndexAsync(PageIndex - 1))">Prev</button>
<button class="bg-dark-red hover:bg-red px-1" @onclick="@(() => SetPageIndexAsync(PageIndex + 1))">Next</button>

<div>Page @(PageIndex + 1) of @TotalPages</div>

@if (_leaderboards == null)
{
	<span>Loading...</span>
}
else if (_leaderboards.HasError)
{
	<span class="text-red">Error while fetching leaderboard overview</span>
}
else
{
	<div class="grid gap-x-2 grid-cols-5">
		<span class="font-bold">Spawnset</span>
		<span class="font-bold text-right">Rank</span>
		<span class="font-bold text-right">Score</span>
		<span class="font-bold text-right">Next dagger</span>
		<span class="font-bold text-right">World record</span>
	</div>

	@foreach (GetCustomLeaderboardForOverview leaderboard in _leaderboards.Response.Results)
	{
		string? daggerColor = leaderboard.SelectedPlayerStats?.Dagger?.GetColorCode();
		string? worldRecordDaggerColor = leaderboard.WorldRecord?.Dagger?.GetColorCode();

		<div class="grid gap-x-2 grid-cols-5 hover:bg-dark-red cursor-pointer" @onclick="@(async () => await InjectSpawnset(leaderboard.SpawnsetId))">
			<span>@leaderboard.SpawnsetName</span>

			@if (leaderboard.SelectedPlayerStats == null)
			{
				<span class="text-right">N/A</span>
				<span class="text-right">N/A</span>
			}
			else
			{
				<span class="text-right">@leaderboard.SelectedPlayerStats.Rank / @leaderboard.PlayerCount</span>
				<span class="text-right" style="color: @daggerColor;">@leaderboard.SelectedPlayerStats.Time.ToString("N4")</span>
			}

			<span class="text-right">TODO</span>

			@if (leaderboard.WorldRecord == null)
			{
				<span class="text-right">N/A</span>
			}
			else
			{
				<span class="text-right" style="color: @worldRecordDaggerColor;">@leaderboard.WorldRecord.Time.ToString("N4")</span>
			}
		</div>
	}
}

@code
{
	private const int _pageSize = 20;

	private ResponseWrapper<Page<GetCustomLeaderboardForOverview>>? _leaderboards;

	private int TotalPages => _leaderboards == null || _leaderboards.HasError ? 0 : (int)Math.Ceiling(_leaderboards.Response.TotalResults / (double)_pageSize);

	[Inject]
	public NetworkService NetworkService { get; set; } = null!;

	[Parameter]
	[EditorRequired]
	public int SelectedPlayerId { get; set; }

	[Parameter]
	public CustomLeaderboardCategory Category { get; set; } = CustomLeaderboardCategory.Survival;

	[Parameter]
	public int PageIndex { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		await UpdateListAsync();
	}

	private async Task SetPageIndexAsync(int pageIndex)
	{
		if (pageIndex < 0 || pageIndex > TotalPages - 1)
			return;

		PageIndex = pageIndex;
		await UpdateListAsync();
	}

	private async Task UpdateListAsync()
	{
		_leaderboards = await NetworkService.GetLeaderboardOverview(Category, PageIndex, _pageSize, SelectedPlayerId, true);
	}

	public async Task InjectSpawnset(int spawnsetId)
	{
		byte[]? spawnset = await NetworkService.GetSpawnset(spawnsetId);

		// TODO: Get path from running process and refactor to platform-specific DI service interface.
		if (spawnset != null)
			File.WriteAllBytes(@"C:\Program Files (x86)\Steam\steamapps\common\devildaggers\mods\survival", spawnset);
	}
}
