@using Microsoft.AspNetCore.Components
@using DevilDaggersInfo.Api.Admin.CustomLeaderboards
@using DevilDaggersInfo.Types.Web.Extensions
@using DevilDaggersInfo.Web.Client.Components
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Components.Input
@using DevilDaggersInfo.Web.Client.Extensions
@using DevilDaggersInfo.Web.Client.StateObjects.Admin.CustomLeaderboards
@using DevilDaggersInfo.Web.Core.CriteriaExpression
@using DevilDaggersInfo.Web.Core.CriteriaExpression.Exceptions
@using DevilDaggersInfo.Web.Core.CriteriaExpression.Parts

<div class="py-1">
	<SearchDropdown TKey="CustomLeaderboardCriteriaOperator" Values="_operators" Converter="_operatorConverter" ShowDisplayValue="false" @bind-Value="@Criteria.Operator"/>
	<InputTextImmediate class="admin-input mr-2" @bind-Value="Criteria.Expression"/>

	@if (Criteria.Expression == null || Criteria.Operator == CustomLeaderboardCriteriaOperator.Any)
	{
		<span style="color: @CriteriaType.GetColor()">@CriteriaType.Display()</span>
		<span>can be anything</span>
	}
	else
	{
		try
		{
			Expression expression = Expression.Parse(Criteria.Expression);

			<CriteriaExpressionComponent Expression="expression" CriteriaOperator="Criteria.Operator" CriteriaType="CriteriaType"/>

			<span class="text-green text-sm">(@BitConverter.ToString(expression.ToBytes()).Replace("-", " "))</span>
		}
		catch (CriteriaExpressionParseException ex)
		{
			<span class="text-red">@ex.Message</span>
		}
	}
</div>

@code {
	private readonly Dictionary<CustomLeaderboardCriteriaOperator, string> _operators = Enum.GetValues<CustomLeaderboardCriteriaOperator>().ToDictionary(e => e, e => e.ToString());
	private readonly Func<string, CustomLeaderboardCriteriaOperator> _operatorConverter = Enum.Parse<CustomLeaderboardCriteriaOperator>;

	[Parameter]
	[EditorRequired]
	public CustomLeaderboardCriteriaType CriteriaType { get; set; }

	[Parameter]
	[EditorRequired]
	public required AddCustomLeaderboardCriteriaState Criteria { get; set; }
}
