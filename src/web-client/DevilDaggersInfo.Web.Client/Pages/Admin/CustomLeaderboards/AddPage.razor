@page "/admin/custom-leaderboards/add"
@inherits BaseAdminPage
@using DevilDaggersInfo.Api.Admin.CustomLeaderboards
@using DevilDaggersInfo.Api.Admin.Spawnsets
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Enums

<AdminAuthorizer Base="this" RequiredRole="@Roles.CustomLeaderboards">
	<AdminAdd Name="Custom Leaderboard" OverviewUrl="/admin/custom-leaderboards" ApiCall="Http.AddCustomLeaderboard" Model="_addCustomLeaderboard" OnPopulate="async (ac) => await PopulateAsync(ac)">
		<InputWrapper Label="Spawnset"><SearchDropdown TKey=int Values="@_spawnsetNames" Converter="s => int.Parse(s)" @bind-Value="@_addCustomLeaderboard.SpawnsetId" /></InputWrapper>
		<InputWrapper Label="Category"><SearchDropdown TKey=CustomLeaderboardCategory Values="@(Enum.GetValues<CustomLeaderboardCategory>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<CustomLeaderboardCategory>(s)" ShowDisplayValue=false @bind-Value="@_addCustomLeaderboard.Category" /></InputWrapper>
		<InputWrapper Label="Featured"><InputCheckbox @bind-Value="@_addCustomLeaderboard.IsFeatured" /></InputWrapper>
		@if (_addCustomLeaderboard.IsFeatured)
		{
			<InputWrapper Label="Bronze"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.Daggers.Bronze" /></InputWrapper>
			<InputWrapper Label="Silver"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.Daggers.Silver" /></InputWrapper>
			<InputWrapper Label="Golden"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.Daggers.Golden" /></InputWrapper>
			<InputWrapper Label="Devil"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.Daggers.Devil" /></InputWrapper>
			<InputWrapper Label="Leviathan"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.Daggers.Leviathan" /></InputWrapper>
		}

		<Heading Level="2" Title="Criteria" />

		<InputWrapper Label="Gems collected operator"><SearchDropdown TKey=CustomLeaderboardCriteriaOperator Values="_operators" Converter="_operatorConverter" ShowDisplayValue=false @bind-Value="@_addCustomLeaderboard.GemsCollectedCriteria.Operator" /></InputWrapper>
		<InputWrapper Label="Gems collected value"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.GemsCollectedCriteria.Value" /></InputWrapper>
		
		<InputWrapper Label="Enemies killed operator"><SearchDropdown TKey=CustomLeaderboardCriteriaOperator Values="_operators" Converter="_operatorConverter" ShowDisplayValue=false @bind-Value="@_addCustomLeaderboard.EnemiesKilledCriteria.Operator" /></InputWrapper>
		<InputWrapper Label="Enemies killed value"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.EnemiesKilledCriteria.Value" /></InputWrapper>

		<InputWrapper Label="Daggers fired operator"><SearchDropdown TKey=CustomLeaderboardCriteriaOperator Values="_operators" Converter="_operatorConverter" ShowDisplayValue=false @bind-Value="@_addCustomLeaderboard.DaggersFiredCriteria.Operator" /></InputWrapper>
		<InputWrapper Label="Daggers fired value"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.DaggersFiredCriteria.Value" /></InputWrapper>

		<InputWrapper Label="Daggers hit operator"><SearchDropdown TKey=CustomLeaderboardCriteriaOperator Values="_operators" Converter="_operatorConverter" ShowDisplayValue=false @bind-Value="@_addCustomLeaderboard.DaggersHitCriteria.Operator" /></InputWrapper>
		<InputWrapper Label="Daggers hit value"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.DaggersHitCriteria.Value" /></InputWrapper>
		
		<Heading Level="2" Title="Enemy criteria" />
		
		<InputWrapper Label="Skull 1 kills operator"><SearchDropdown TKey=CustomLeaderboardCriteriaOperator Values="_operators" Converter="_operatorConverter" ShowDisplayValue=false @bind-Value="@_addCustomLeaderboard.Skull1KillsCriteria.Operator" /></InputWrapper>
		<InputWrapper Label="Skull 1 kills value"><InputNumber class="admin-input" @bind-Value="_addCustomLeaderboard.Skull1KillsCriteria.Value" /></InputWrapper>
	</AdminAdd>
</AdminAuthorizer>

@code
{
	private readonly Dictionary<CustomLeaderboardCriteriaOperator, string> _operators = Enum.GetValues<CustomLeaderboardCriteriaOperator>().ToDictionary(e => e, e => e.ToString());
	private readonly Func<string, CustomLeaderboardCriteriaOperator> _operatorConverter = s => Enum.Parse<CustomLeaderboardCriteriaOperator>(s);

	private Dictionary<int, string>? _spawnsetNames;
	private readonly AddCustomLeaderboard _addCustomLeaderboard = new();

	public async Task PopulateAsync(AdminAdd<AddCustomLeaderboard> addComponent)
	{
		try
		{
			List<GetSpawnsetName> getSpawnsetNames = await Http.GetSpawnsetNames();
			_spawnsetNames = getSpawnsetNames.ToDictionary(sn => sn.Id, sn => sn.Name);

			addComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				addComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				addComponent.ErrorMessage = "An error occurred while sending the request.";

			addComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
