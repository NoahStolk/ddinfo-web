@page "/admin/donations/add"
@inherits BaseAdminPage
@using DevilDaggersInfo.Api.Admin.Donations
@using DevilDaggersInfo.Api.Admin.Players
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Enums

<AdminAuthorizer Base="this" RequiredRole="@Roles.Admin">
	<AdminAdd Name="Donation" OverviewUrl="/admin/donations" ApiCall="Http.AddDonation" Model="_addDonation" OnPopulate="async (ac) => await PopulateAsync(ac)">
		<InputWrapper Label="Player"><SearchDropdown TKey=int Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@_addDonation.PlayerId" /></InputWrapper>
		<InputWrapper Label="Amount"><InputNumber class="admin-input" @bind-Value="_addDonation.Amount" /></InputWrapper>
		<InputWrapper Label="Currency"><SearchDropdown TKey=Currency Values="@(Enum.GetValues<Currency>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<Currency>(s)" @bind-Value="@_addDonation.Currency" /></InputWrapper>
		<InputWrapper Label="ConvertedEuroCentsReceived"><InputNumber class="admin-input" @bind-Value="_addDonation.ConvertedEuroCentsReceived" /></InputWrapper>
		<InputWrapper Label="Note"><InputTextArea class="admin-input" @bind-Value="@_addDonation.Note" /></InputWrapper>
		<InputWrapper Label="Refunded"><InputCheckbox @bind-Value="@_addDonation.IsRefunded" /></InputWrapper>
	</AdminAdd>
</AdminAuthorizer>

@code
{
	private Dictionary<int, string>? _playerNames;
	private readonly AddDonation _addDonation = new();

	public async Task PopulateAsync(AdminAdd<AddDonation> addComponent)
	{
		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			addComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				addComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				addComponent.ErrorMessage = "An error occurred while sending the request.";

			addComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
