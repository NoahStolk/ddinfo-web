@page "/admin/tools/add-distribution"
@inherits BaseAdminPage
@using DevilDaggersInfo.Web.Client.Components
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Components.Input
@using DevilDaggersInfo.Web.Client.StateObjects.Admin.Tools

<AdminAuthorizer Base="this" RequiredRole="@Roles.Admin">
	<Heading Title="Admin - Add Distribution"/>

	<EditForm Model="@StateObject" OnValidSubmit="@OnValidSubmit">
		<DataAnnotationsValidator/>
		<ValidationSummary/>

		<InputWrapper Label="Name">
			<SearchDropdown TKey="string" Values="@_toolNames.ToDictionary(s => s, s => s)" Converter="s => s" ShowDisplayValue="false" @bind-Value="@StateObject.Name"/>
		</InputWrapper>
		<InputWrapper Label="Version">
			<InputText class="admin-input" @bind-Value="@StateObject.Version"/>
		</InputWrapper>
		<InputWrapper Label="Publish method">
			<SearchDropdown TKey="ToolPublishMethod" Values="@(Enum.GetValues<ToolPublishMethod>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<ToolPublishMethod>(s)" ShowDisplayValue="false" @bind-Value="@StateObject.PublishMethod"/>
		</InputWrapper>
		<InputWrapper Label="Build type">
			<SearchDropdown TKey="ToolBuildType" Values="@(Enum.GetValues<ToolBuildType>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<ToolBuildType>(s)" ShowDisplayValue="false" @bind-Value="@StateObject.BuildType"/>
		</InputWrapper>
		<InputWrapper Label="Zip file">
			<InputFile OnChange="LoadFile"/>
		</InputWrapper>
		<InputWrapper Label="Update version">
			<InputCheckbox @bind-Value="@StateObject.UpdateVersion"/>
		</InputWrapper>
		<InputWrapper Label="Update required version">
			<InputCheckbox @bind-Value="@StateObject.UpdateRequiredVersion"/>
		</InputWrapper>

		@{
			const string disabledStyle = "disabled:opacity-50 cursor-default btn-disabled";
			const string enabledStyle = "btn-gray";
		}

		<button disabled="@_submitting" class="@(_submitting ? disabledStyle : enabledStyle) btn p-1" type="submit">Add distribution</button>
	</EditForm>
</AdminAuthorizer>

@code
{
	private static readonly List<string> _toolNames = new() { "DevilDaggersSurvivalEditor", "DevilDaggersCustomLeaderboards", "DevilDaggersAssetEditor", "DevilDaggersReplayEditor", "ddinfo-tools" };

	private bool _submitting;

	[Parameter]
	public AddDistributionState StateObject { get; set; } = new();

	private async Task LoadFile(InputFileChangeEventArgs e)
	{
		using MemoryStream ms = new();
		await e.File.OpenReadStream(100 * 1024 * 1024).CopyToAsync(ms);
		StateObject.ZipFileContents = ms.ToArray();
	}

	private async Task OnValidSubmit()
	{
		try
		{
			_submitting = true;
			HttpResponseMessage hrm = await Http.AddDistribution(StateObject.ToModel());
			_submitting = false;

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/tools");
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
