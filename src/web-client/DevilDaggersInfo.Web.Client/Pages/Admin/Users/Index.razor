@page "/admin/users"
@inherits BaseAdminPage
@using DevilDaggersInfo.Api.Admin.Users

<AdminAuthorizer Base="this" RequiredRole="@Roles.Players">
	<Heading Title="Admin - Users" />

	@if (_users == null)
	{
		if (!_errorThrown)
		{
			<Loading />
		}
	}
	else
	{
		<Deletion AfterDelete="Fetch" ApiCall="(int id) => Http.DeleteUserById(id)" @ref="_deletion" />

		<div class="grid gap-2 grid-cols-admin-users-sm md:grid-cols-admin-users-md lg:grid-cols-admin-users-lg xl:grid-cols-admin-users-xl">
			<div class="font-bold">Id</div>
			<div class="font-bold">Name</div>
			<div class="font-bold">PlayerId</div>
			<div class="font-bold">PlayerName</div>
			<div class="font-bold">Admin</div>
			<div class="font-bold">CLs</div>
			<div class="font-bold">Mods</div>
			<div class="font-bold">Players</div>
			<div class="font-bold">Spawnsets</div>
			<div></div>
			<div></div>
		</div>
		<div>
			@{
				int i = 0;
				foreach (GetUser user in _users)
				{
					<div class="grid gap-2 grid-cols-admin-users-sm md:grid-cols-admin-users-md lg:grid-cols-admin-users-lg xl:grid-cols-admin-users-xl @(i++ % 2 == 0 ? "bg-gray-1" : string.Empty)">
						<div class="overflow-hidden">@user.Id</div>
						<div class="overflow-hidden">@user.Name</div>
						<div class="overflow-hidden">@user.PlayerId</div>
						<div class="overflow-hidden">@user.PlayerName</div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="@GetRoleButtonClass(IsAdmin == true, user.IsAdmin)" @onclick="async () => await ToggleRole(user.Id, Roles.Admin)">@GetRoleButtonText(user.IsAdmin)</button></div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="@GetRoleButtonClass(IsAdmin == true, user.IsCustomLeaderboardsMaintainer)" @onclick="async () => await ToggleRole(user.Id, Roles.CustomLeaderboards)">@GetRoleButtonText(user.IsCustomLeaderboardsMaintainer)</button></div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="@GetRoleButtonClass(IsAdmin == true, user.IsModsMaintainer)" @onclick="async () => await ToggleRole(user.Id, Roles.Mods)">@GetRoleButtonText(user.IsModsMaintainer)</button></div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="@GetRoleButtonClass(IsAdmin == true, user.IsPlayersMaintainer)" @onclick="async () => await ToggleRole(user.Id, Roles.Players)">@GetRoleButtonText(user.IsPlayersMaintainer)</button></div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="@GetRoleButtonClass(IsAdmin == true, user.IsSpawnsetsMaintainer)" @onclick="async () => await ToggleRole(user.Id, Roles.Spawnsets)">@GetRoleButtonText(user.IsSpawnsetsMaintainer)</button></div>
						<div class="overflow-hidden"><a class="btn btn-gray-light block w-14" href="@($"/admin/users/assign-player/{user.Id}")">Assign</a></div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="btn w-14 @(IsAdmin == true ? "btn-gray-light" : "btn-disabled text-gray-6")" @onclick="() => _deletion?.Set(user.Id)">Delete</button></div>
						<div class="overflow-hidden"><button disabled="@(!IsAdmin)" class="btn w-14 @(IsAdmin == true ? "btn-gray-light" : "btn-disabled text-gray-6")" @onclick="@(() => NavigationManager.NavigateTo($"/admin/users/reset-password/{user.Id}"))">Reset</button></div>
					</div>
				}
			}
		</div>
	}
</AdminAuthorizer>

@code
{
	private static string GetRoleButtonText(bool isAssigned)
		=> isAssigned ? "➖" : "➕";

	private static string GetRoleButtonClass(bool enabled, bool isAssigned)
		=> $"btn px-2 {(enabled ? GetButtonColor(isAssigned ? Color.Red : Color.Green) : "btn-disabled text-gray-6")}";

	private static string GetButtonColor(Color color) => color switch
	{
		Color.Red => "btn-red",
		Color.Green => "btn-green",
		_ => "btn-gray",
	};

	private enum Color
	{
		Red,
		Green,
		Gray,
	}
}
