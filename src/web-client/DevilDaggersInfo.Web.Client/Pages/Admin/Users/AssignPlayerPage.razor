@page "/admin/users/assign-player/{Id:int}"
@inherits BaseAdminPage
@using DevilDaggersInfo.Api.Admin.Users
@using DevilDaggersInfo.Api.Admin.Players

<AdminAuthorizer Base="this" RequiredRole="@Roles.Players">
	<Heading Title="Admin - Assign Player" />

	<EditForm Model="@Model" OnValidSubmit="@OnValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<InputWrapper Label="Player"><SearchDropdown TKey=int Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@Model.PlayerId" /></InputWrapper>

		<button class="btn btn-gray p-1" type="submit">Assign player</button>
	</EditForm>
</AdminAuthorizer>

@code
{
	private Dictionary<int, string>? _playerNames;

	[Parameter, EditorRequired] public int Id { get; set; }

	[Parameter] public AssignPlayer Model { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			GetUser getUser = await Http.GetUserById(Id);
			Model.PlayerId = getUser.PlayerId ?? 0;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task OnValidSubmit()
	{
		try
		{
			HttpResponseMessage hrm = await Http.AssignPlayer(Id, Model);

			if (hrm.StatusCode == HttpStatusCode.OK)
				NavigationManager.NavigateTo("/admin/users");
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
