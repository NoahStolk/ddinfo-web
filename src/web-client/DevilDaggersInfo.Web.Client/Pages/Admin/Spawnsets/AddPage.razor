@page "/admin/spawnsets/add"
@inherits BaseAdminPage
@using DevilDaggersInfo.Api.Admin.Spawnsets
@using DevilDaggersInfo.Api.Admin.Players
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Enums

<AdminAuthorizer Base="this" RequiredRole="@Roles.Spawnsets">
	<AdminAdd Name="Spawnset" OverviewUrl="/admin/spawnsets" ApiCall="Http.AddSpawnset" Model="_addSpawnset" OnPopulate="async (ac) => await PopulateAsync(ac)">
		<InputWrapper Label="Author"><SearchDropdown TKey=int Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@_addSpawnset.PlayerId" /></InputWrapper>
		<InputWrapper Label="Name"><InputText class="admin-input" @bind-Value="@_addSpawnset.Name" /></InputWrapper>
		<InputWrapper Label="Max display waves"><InputNumber class="admin-input" @bind-Value="_addSpawnset.MaxDisplayWaves" /></InputWrapper>
		<InputWrapper Label="HTML description"><InputTextArea class="admin-input w-full h-64" @bind-Value="@_addSpawnset.HtmlDescription" /></InputWrapper>
		<InputWrapper Label="Practice"><InputCheckbox @bind-Value="@_addSpawnset.IsPractice" /></InputWrapper>
		<InputWrapper Label="File"><InputFile OnChange="LoadFile" /></InputWrapper>
	</AdminAdd>
</AdminAuthorizer>

@code
{
	private Dictionary<int, string>? _playerNames;
	private readonly AddSpawnset _addSpawnset = new();

	public async Task PopulateAsync(AdminAdd<AddSpawnset> addComponent)
	{
		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			addComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				addComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				addComponent.ErrorMessage = "An error occurred while sending the request.";

			addComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}

	private async Task LoadFile(InputFileChangeEventArgs e)
	{
		IBrowserFile file = e.File;
		using MemoryStream ms = new();
		await file.OpenReadStream().CopyToAsync(ms);

		_addSpawnset.FileContents = ms.ToArray();
	}
}
