@page "/admin/spawnsets/edit/{Id:int}"
@inherits BaseAdminPage
@using DevilDaggersInfo.Api.Admin.Spawnsets
@using DevilDaggersInfo.Api.Admin.Players
@using DevilDaggersInfo.Web.Client.Components.Admin
@using DevilDaggersInfo.Web.Client.Enums

<AdminAuthorizer Base="this" RequiredRole="@Roles.Spawnsets">
	<AdminEdit Name="Spawnset" OverviewUrl="/admin/spawnsets" ApiCall="Http.EditSpawnsetById" Model="_editSpawnset" Id="Id" OnPopulate="async (ec) => await PopulateAsync(ec)">
		<InputWrapper Label="Author"><SearchDropdown TKey=int Values="@_playerNames" Converter="s => int.Parse(s)" @bind-Value="@_editSpawnset.PlayerId" /></InputWrapper>
		<InputWrapper Label="Name"><InputText class="admin-input" @bind-Value="@_editSpawnset.Name" /></InputWrapper>
		<InputWrapper Label="Max display waves"><InputNumber class="admin-input" @bind-Value="_editSpawnset.MaxDisplayWaves" /></InputWrapper>
		<InputWrapper Label="HTML description"><InputTextArea class="admin-input w-full h-64" @bind-Value="@_editSpawnset.HtmlDescription" /></InputWrapper>
		<InputWrapper Label="Practice"><InputCheckbox @bind-Value="@_editSpawnset.IsPractice" /></InputWrapper>
	</AdminEdit>
</AdminAuthorizer>

@code
{
	private Dictionary<int, string>? _playerNames;
	private readonly EditSpawnset _editSpawnset = new();

	[Parameter, EditorRequired] public int Id { get; set; }

	private async Task PopulateAsync(AdminEdit<EditSpawnset> editComponent)
	{
		try
		{
			List<GetPlayerName> getPlayerNames = await Http.GetPlayerNames();
			_playerNames = getPlayerNames.ToDictionary(m => m.Id, m => m.PlayerName);

			GetSpawnset getSpawnset = await Http.GetSpawnsetById(Id);
			_editSpawnset.HtmlDescription = getSpawnset.HtmlDescription;
			_editSpawnset.IsPractice = getSpawnset.IsPractice;
			_editSpawnset.MaxDisplayWaves = getSpawnset.MaxDisplayWaves;
			_editSpawnset.Name = getSpawnset.Name;
			_editSpawnset.PlayerId = getSpawnset.PlayerId;

			editComponent.State = ErrorState.None;
		}
		catch (HttpRequestException ex)
		{
			if (ex.StatusCode.HasValue)
				editComponent.ErrorMessage = $"Error {(int)ex.StatusCode}: {ex.StatusCode}";
			else
				editComponent.ErrorMessage = "An error occurred while sending the request.";

			editComponent.State = ErrorState.FatalError;
		}
		catch (AccessTokenNotAvailableException exception)
		{
			exception.Redirect();
		}
	}
}
