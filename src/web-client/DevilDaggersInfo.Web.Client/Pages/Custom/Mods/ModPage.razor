@page "/custom/mod/{Id:int}"
@using DevilDaggersInfo.Api.Main.Mods
@inject MainApiHttpClient Http
@inject NavigationManager NavigationManager

@if (GetMod == null)
{
	if (_notFound)
	{
		<Heading Title="Mod not found" />
		<p>This mod doesn't exist. Click <a class="link" href="/custom/mods">here</a> to go back to the mods overview.</p>
	}
	else
	{
		<Loading />
	}
}
else
{
	<Heading Title="@($"Mod - {GetMod.Name}")" BreakAll="true" />

	<div class="bg-gray-1 max-w-sm px-1">
		<DataField Name="Author(s)"><span class="whitespace-nowrap">@string.Join(", ", GetMod.Authors)</span></DataField>
		<DataField Name="Last updated">@GetMod.LastUpdated.ToString(StringFormats.DateTimeFormat)</DataField>
		<DataField Name="Prohibited binaries">@(GetMod.ContainsProhibitedAssets.HasValue ? GetMod.ContainsProhibitedAssets.Value ? "Yes" : "No" : "Unknown")</DataField>
		@if (GetMod.ModArchive != null)
		{
			<DataField Name="File size">@FileSizeUtils.Format(GetMod.ModArchive.FileSize)</DataField>
			<DataField Name="File size (extracted)">@FileSizeUtils.Format(GetMod.ModArchive.FileSizeExtracted)</DataField>
		}

		@{
			string? url = GetMod.IsHosted ? $"/api/mods/{GetMod.Name}/file" : GetMod.Url;
			if (!string.IsNullOrWhiteSpace(url))
			{
				<div class="grid grid-cols-2 text-lg">
					<div class="px-1 py-3">
						@if (GetMod.IsHosted)
						{
							<a class="btn btn-download px-2 py-1" href="@url" role="button" target="_top">Download mod</a>
						}
						else
						{
							<a class="btn btn-download px-2 py-1" href="@url" role="button" target="_blank">Download mod</a>
						}
					</div>
				</div>
			}
		}
	</div>

	@if (!string.IsNullOrWhiteSpace(GetMod.HtmlDescription))
	{
		<Heading Title="Description" Level="2" />
		<div class="bg-gray-1 max-w-sm px-1">
			@((MarkupString)@GetMod.HtmlDescription)
		</div>
	}

	@if (!string.IsNullOrWhiteSpace(GetMod.TrailerUrl))
	{
		<Heading Title="Trailer" Level="2" />
		<div class="relative w-full xl:w-1/2 pb-16-9 xl:pb-16-9/2">
			<iframe class="absolute top-0 left-0 w-full h-full" src="@GetMod.TrailerUrl" title="@GetMod.Name" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
		</div>
	}

	@if (GetMod.ScreenshotFileNames != null)
	{
		if (GetMod.ScreenshotFileNames.Count > 1)
		{
			<Heading Title="Screenshots" Level="2" />

			bool first = _screenshotIndex == 0;
			bool last = _screenshotIndex == GetMod.ScreenshotFileNames.Count - 1;

			const string disabledStyle = "disabled:opacity-50 cursor-default btn-disabled";
			const string enabledStyle = "btn-gray";

			<button disabled="@first" class="@(first ? disabledStyle : enabledStyle) btn w-10 h-10 mx-1" @onclick="() => _screenshotIndex--">@MarkupStrings.NavPrev</button>
			<button disabled="@last" class="@(last ? disabledStyle : enabledStyle) btn w-10 h-10 mx-1" @onclick="() => _screenshotIndex++">@MarkupStrings.NavNext</button>

			@for (int i = 0; i < GetMod.ScreenshotFileNames.Count; i++)
			{
				string fileName = GetMod.ScreenshotFileNames[i];
				<img class="@(i == _screenshotIndex ? "" : "hidden") object-contain max-h-160 pt-3" src="@($"api/mod-screenshots?modName={Uri.EscapeDataString(GetMod.Name)}&fileName={fileName}")" />
			}
		}
		else if (GetMod.ScreenshotFileNames.Count == 1)
		{
			<Heading Title="Screenshot" Level="2" />
			<img src="@($"api/mod-screenshots?modName={Uri.EscapeDataString(GetMod.Name)}&fileName={GetMod.ScreenshotFileNames[0]}")" class="object-contain max-h-160 pt-3" />
		}
	}

	@if (GetMod.ModArchive != null)
	{
		<Heading Title="Binaries" Level="2" />
		<div class="bg-gray-2 grid gap-3 grid-cols-mod-binaries-xs sm:grid-cols-mod-binaries-sm md:grid-cols-mod-binaries-md lg:grid-cols-mod-binaries-lg">
			<div>Binary</div>
			<div class="hidden sm:block">Type</div>
			<div class="hidden md:block">Prohibited for 1000+</div>
			<div class="hidden lg:block text-right">Assets</div>
			<div class="hidden lg:block text-right">Size (extracted)</div>
		</div>
		@foreach (GetModBinary binary in GetMod.ModArchive.Binaries.OrderBy(b => b.Name))
		{
			<div class="grid gap-3 odd:bg-gray-1 grid-cols-mod-binaries-xs sm:grid-cols-mod-binaries-sm md:grid-cols-mod-binaries-md lg:grid-cols-mod-binaries-lg">
				<div class="break-all">@binary.Name</div>
				<div class="hidden sm:block">@binary.ModBinaryType.ToString().ToLower()</div>
				<div class="hidden md:block">@MarkupUtils.ProhibitedString(binary.ContainsProhibitedAssets)</div>
				<div class="hidden lg:block text-right">@binary.Assets.Count</div>
				<div class="hidden lg:block text-right">@FileSizeUtils.Format(binary.Size)</div>
			</div>
		}

		<Heading Title="Assets" Level="2" />
		<div class="bg-gray-2 grid gap-3 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg">
			<div>Asset</div>
			<div class="hidden sm:block">Binary</div>
			<div class="hidden md:block">Type</div>
			<div class="hidden lg:block">Prohibited for 1000+</div>
			<div class="hidden lg:block text-right">Size (extracted)</div>
		</div>
		@foreach (GetModBinary binary in GetMod.ModArchive.Binaries.OrderBy(b => b.Name))
		{
			foreach (GetModAsset asset in binary.Assets.OrderBy(a => a.Type).ThenBy(a => a.Name))
			{
				<div class="grid gap-3 odd:bg-gray-1 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg">
					<div class="break-all">@asset.Name</div>
					<div class="hidden sm:block break-all">@binary.Name</div>
					<div class="hidden md:block">@asset.Type</div>
					<div class="hidden lg:block">@MarkupUtils.ProhibitedString(asset.IsProhibited)</div>
					<div class="hidden lg:block text-right">@FileSizeUtils.Format(asset.Size)</div>
				</div>
			}
		}

		@if (GetMod.ModArchive.Binaries.Any(b => b.ModifiedLoudness != null && b.ModifiedLoudness.Count > 0))
		{
			<Heading Title="Modified Loudness" Level="2" />
			<div class="bg-gray-2 grid gap-3 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg">
				<div>Asset</div>
				<div class="hidden sm:block">Binary</div>
				<div class="hidden md:block">Prohibited for 1000+</div>
				<div class="hidden lg:block text-right">Default loudness</div>
				<div class="hidden lg:block text-right">Modified loudness</div>
			</div>
			@foreach (GetModBinary binary in GetMod.ModArchive.Binaries.Where(b => b.ModifiedLoudness != null && b.ModifiedLoudness.Count > 0))
			{
				foreach (GetModifiedLoudness asset in binary.ModifiedLoudness!.OrderBy(a => a.AssetName))
				{
					<div class="grid gap-3 odd:bg-gray-1 grid-cols-mod-assets-xs sm:grid-cols-mod-assets-sm md:grid-cols-mod-assets-md lg:grid-cols-mod-assets-lg">
						<div class="break-all">@asset.AssetName</div>
						<div class="hidden sm:block break-all">@binary.Name</div>
						<div class="hidden md:block">@MarkupUtils.ProhibitedString(asset.IsProhibited)</div>
						<div class="hidden lg:block text-right">@asset.DefaultLoudness.ToString("0.0")</div>
						<div class="hidden lg:block text-right">@asset.ModifiedLoudness.ToString("0.0")</div>
					</div>
				}
			}
		}
	}
}

@code
{
	private int _screenshotIndex;
	private bool _notFound;

	[Parameter, EditorRequired] public int Id { get; set; }

	public GetMod? GetMod { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		try
		{
			GetMod = await Http.GetModById(Id);
		}
		catch (HttpRequestException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
		{
			_notFound = true;
		}
	}
}
