@page "/custom/spawnsets"
@using DevilDaggersInfo.Api.Main.Spawnsets
@using DevilDaggersInfo.Core.Spawnset.Extensions
@using DevilDaggersInfo.Web.Client.Extensions
@inject MainApiHttpClient Http
@inject NavigationManager NavigationManager

<Heading Title="Spawnsets" />

<p class="para">
	Custom spawnsets are files that can change the enemy spawns and arena. They are used for practice and for participating in custom leaderboards. Read more about how to use spawnsets <a class="link" href="/guides/using-spawnsets">here</a>.
</p>

@if (GetSpawnsets == null)
{
	<Loading />
}
else
{
	<div class="bg-gray-1 p-2 text-lg">
		<div class="grid gap-2 grid-cols-2 max-w-md mb-2">
			<span>Spawnset name</span>
			<input class="bg-black border-gray-3 border-2 w-48" value="@SpawnsetFilter" @onchange="ChangeInputSpawnsetName" />
			<span>Author name</span>
			<input class="bg-black border-gray-3 border-2 w-48" value="@AuthorFilter" @onchange="ChangeInputAuthorName" />
			<span>Practice only</span>
			<Checkbox CurrentValue="@PracticeOnly" Selected="@(b => ChangeInputPracticeOnly(b))" />
			<span>With leaderboard only</span>
			<Checkbox CurrentValue="@WithCustomLeaderboardOnly" Selected="@(b => ChangeInputWithCustomLeaderboardOnly(b))" />
		</div>

		<CascadingValue Value="this">
			<Paging />
		</CascadingValue>
	</div>

	@if (GetSpawnsets.Results.Count > 0)
	{
		<div class="grid gap-3 grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl">
			<div><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.Name)">Name</a></div>
			<div class="hidden md:block"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.AuthorName)">Author</a></div>
			<div class="hidden md:block"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.LastUpdated)">Last updated</a></div>
			<div><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.GameMode)">Game mode</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.LoopLength)">Loop length</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.LoopSpawnCount)">Loop spawns</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.PreLoopLength)">Pre-loop length</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.PreLoopSpawnCount)">Pre-loop spawns</a></div>
			<div class="hidden lg:block"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.Hand)">Hand</a></div>
			<div class="hidden lg:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(SpawnsetSorting.AdditionalGems)">Gems</a></div>
		</div>

		for (int i = 0; i < GetSpawnsets.Results.Count; i++)
		{
			GetSpawnsetOverview spawnset = GetSpawnsets.Results[i];
			<div class="grid gap-3 grid-cols-spawnsets-sm md:grid-cols-spawnsets-md lg:grid-cols-spawnsets-lg xl:grid-cols-spawnsets-xl h-6 @(i % 2 == 0 ? "bg-gray-1" : string.Empty)">
				<div class="overflow-hidden"><a class="link" href="/custom/spawnset/@spawnset.Id">@spawnset.Name.ToNoBreakString()</a></div>
				<div class="overflow-hidden hidden md:block">@spawnset.AuthorName.ToNoBreakString()</div>
				<div class="overflow-hidden hidden md:block">@spawnset.LastUpdated.ToString(StringFormats.DateFormat)</div>
				<div class="overflow-hidden">@spawnset.GameMode.ToDisplayString()</div>
				<div class="overflow-hidden hidden xl:block text-right">@(spawnset.LoopLength.HasValue ? (MarkupString)spawnset.LoopLength.Value.ToString(StringFormats.TimeFormat) : MarkupStrings.NoDataMarkup)</div>
				<div class="overflow-hidden hidden xl:block text-right">@spawnset.LoopSpawnCount</div>
				<div class="overflow-hidden hidden xl:block text-right">@(spawnset.PreLoopLength.HasValue ? (MarkupString)spawnset.PreLoopLength.Value.ToString(StringFormats.TimeFormat) : MarkupStrings.NoDataMarkup)</div>
				<div class="overflow-hidden hidden xl:block text-right">@spawnset.PreLoopSpawnCount</div>
				<div class="overflow-hidden hidden lg:block">@spawnset.Hand.ToDisplayString()</div>
				<div class="overflow-hidden hidden lg:block text-right">@spawnset.AdditionalGems</div>
			</div>
		}
	}
}
