@page "/custom/leaderboards"
@using DevilDaggersInfo.Api.Main.CustomLeaderboards
@using DevilDaggersInfo.Api.Main.Spawnsets
@using DevilDaggersInfo.Common
@using DevilDaggersInfo.Core.CriteriaExpression.Extensions
@using DevilDaggersInfo.Web.Client.Components
@using DevilDaggersInfo.Web.Client.Extensions
@using DevilDaggersInfo.Web.Client.HttpClients
@using DevilDaggersInfo.Web.Client.Utils
@using CustomLeaderboardCriteriaOperator = DevilDaggersInfo.Core.CriteriaExpression.CustomLeaderboardCriteriaOperator
@using CustomLeaderboardCriteriaType = DevilDaggersInfo.Core.CriteriaExpression.CustomLeaderboardCriteriaType
@inject MainApiHttpClient Http
@inject NavigationManager NavigationManager

<Heading Title="Custom Leaderboards" />

<p class="para">
	Custom leaderboards are leaderboards for custom spawnsets. Read more about how to use spawnsets and participate in custom leaderboards <a class="link" href="/guides/using-spawnsets">here</a>.
</p>

<p class="para">
	Check out the global custom leaderboards <a class="link" href="/custom/leaderboards/global">here</a>.
</p>

@if (GetCustomLeaderboards == null)
{
	<Loading />
}
else
{
	<div class="bg-gray-1 p-2 text-lg">
		<div class="grid gap-2 grid-cols-2 max-w-md mb-2">
			<span>Spawnset name</span>
			<input class="bg-black border-gray-3 border-2 w-48" value="@SpawnsetFilter" @onchange="ChangeInputSpawnsetName" />
			<span>Author name</span>
			<input class="bg-black border-gray-3 border-2 w-48" value="@AuthorFilter" @onchange="ChangeInputAuthorName" />
			<span>Game mode</span>
			<SelectList CssWidthClass="w-48" CssOpenerClass="pl-2" TValue="GameMode" Values="@(_gameModes)" DisplayFunction="@(gm => gm.ToCore().ToDisplayString())" Default="EnumConvert.GetGameMode(GameMode)" Selected="@SetGameMode" />
			<span>Rank sorting</span>
			<SelectList CssWidthClass="w-48" CssOpenerClass="pl-2" TValue="CustomLeaderboardRankSorting" Values="@(_rankSortings)" DisplayFunction="@(rs => rs.ToDisplayString())" Default="EnumConvert.GetRankSorting(RankSorting)" Selected="@SetRankSorting" />
		</div>

		<CascadingValue Value="this">
			<Paging />
		</CascadingValue>
	</div>

	@if (GetCustomLeaderboards.Results.Count > 0)
	{
		<div class="grid gap-3 grid-cols-custom-leaderboards-sm md:grid-cols-custom-leaderboards-md lg:grid-cols-custom-leaderboards-lg xl:grid-cols-custom-leaderboards-xl 2xl:grid-cols-custom-leaderboards-2xl">
			<div><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.SpawnsetName)">Name</a></div>
			<div class="hidden md:block"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.AuthorName)">Author</a></div>
			<div class="hidden md:block"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.DateCreated)">Created</a></div>
			<div><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.DateLastPlayed)">Last played</a></div>
			<div class="hidden 2xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.Submits)">Submits</a></div>
			<div class="hidden 2xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.Players)">Players</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.TimeBronze)">Bronze</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.TimeSilver)">Silver</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.TimeGolden)">Golden</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.TimeDevil)">Devil</a></div>
			<div class="hidden xl:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.TimeLeviathan)">Leviathan</a></div>
			<div class="hidden lg:block"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.TopPlayer)">Top player</a></div>
			<div class="hidden lg:block text-right"><a href="" @onclick:preventDefault class="link" @onclick="() => Sort(CustomLeaderboardSorting.WorldRecord)">WR</a></div>
		</div>
		@for (int i = 0; i < GetCustomLeaderboards.Results.Count; i++)
		{
			GetCustomLeaderboardOverview customLeaderboard = GetCustomLeaderboards.Results[i];
			<div class="grid gap-3 grid-cols-custom-leaderboards-sm md:grid-cols-custom-leaderboards-md lg:grid-cols-custom-leaderboards-lg xl:grid-cols-custom-leaderboards-xl 2xl:grid-cols-custom-leaderboards-2xl h-6 @(i % 2 == 0 ? "bg-gray-1" : string.Empty)">
				<div class="overflow-hidden"><a class="link" href="/custom/leaderboard/@customLeaderboard.Id">@customLeaderboard.SpawnsetName.ToNoBreakString()</a></div>
				<div class="overflow-hidden hidden md:block">@customLeaderboard.SpawnsetAuthorName.ToNoBreakString()</div>
				<div class="overflow-hidden hidden md:block">@customLeaderboard.DateCreated.ToString(StringFormats.DateFormat)</div>
				<div class="overflow-hidden">@FormatUtils.FormatDateTimeAsTimeAgo(customLeaderboard.DateLastPlayed)</div>
				<div class="overflow-hidden text-right hidden 2xl:block">@(customLeaderboard.DateCreated < Constants.TrackingCustomLeaderboardSubmitCounts ? "+" : string.Empty)@customLeaderboard.SubmitCount</div>
				<div class="overflow-hidden text-right hidden 2xl:block">@customLeaderboard.PlayerCount</div>
				@if (customLeaderboard.Daggers == null)
				{
					for (int j = 0; j < 5; j++)
					{
						<div class="overflow-hidden text-right hidden xl:block text-xl font-goethe">@MarkupStrings.NoDataMarkup</div>
					}
				}
				else
				{
					<div class="overflow-hidden text-right hidden xl:block text-xl font-goethe @CustomLeaderboardDagger.Bronze.ToCssClass()">@customLeaderboard.RankSorting.GetDaggerValue(customLeaderboard.Daggers.Bronze)</div>
					<div class="overflow-hidden text-right hidden xl:block text-xl font-goethe @CustomLeaderboardDagger.Silver.ToCssClass()">@customLeaderboard.RankSorting.GetDaggerValue(customLeaderboard.Daggers.Silver)</div>
					<div class="overflow-hidden text-right hidden xl:block text-xl font-goethe @CustomLeaderboardDagger.Golden.ToCssClass()">@customLeaderboard.RankSorting.GetDaggerValue(customLeaderboard.Daggers.Golden)</div>
					<div class="overflow-hidden text-right hidden xl:block text-xl font-goethe @CustomLeaderboardDagger.Devil.ToCssClass()">@customLeaderboard.RankSorting.GetDaggerValue(customLeaderboard.Daggers.Devil)</div>
					<div class="overflow-hidden text-right hidden xl:block text-xl font-goethe @CustomLeaderboardDagger.Leviathan.ToCssClass()">@customLeaderboard.RankSorting.GetDaggerValue(customLeaderboard.Daggers.Leviathan)</div>
				}
				<div class="overflow-hidden text-left hidden lg:block">@(customLeaderboard.TopPlayer?.ToNoBreakString() ?? MarkupStrings.NoDataMarkup)</div>
				<div class="overflow-hidden text-right hidden lg:block text-xl font-goethe @(customLeaderboard.WorldRecordDagger?.ToCssClass())">@(customLeaderboard.WorldRecord.HasValue ? new(customLeaderboard.WorldRecord.Value.ToString(StringFormats.TimeFormat)) : MarkupStrings.NoDataMarkup)</div>
			</div>
		}
	}

	<Heading Level="2" Title="Game Modes" />

	@foreach (GameMode gameMode in _gameModes)
	{
		<div class="flex">
			<div class="flex-none w-36 sm:w-64"><b>@gameMode.ToCore().ToDisplayString()</b></div>
			<div class="flex-1">@gameMode.GetDescription()</div>
		</div>
	}

	<Heading Level="2" Title="Criteria" />

	<p class="para">
		Criteria can be set for custom leaderboards, meaning that in order to submit a score, it has to meet all the criteria.
	</p>

	<div class="grid gap-2 grid-cols-2 max-w-md">
		<div class="overflow-y-scroll h-64">
			<div class="font-bold">Types</div>
			@foreach (CustomLeaderboardCriteriaType criteriaType in Enum.GetValues<CustomLeaderboardCriteriaType>())
			{
				<div style="color: @(criteriaType.GetColor());">@criteriaType.Display()</div>
			}
		</div>
		<div>
			<div class="font-bold">Operators</div>
			@foreach (CustomLeaderboardCriteriaOperator criteriaOperator in Enum.GetValues<CustomLeaderboardCriteriaOperator>())
			{
				<div style="color: @(criteriaOperator.GetColor());">@criteriaOperator.Display()</div>
			}
		</div>
	</div>
}

@if (GetTotalCustomLeaderboardData != null)
{
	<Heading Level="2" Title="Statistics" />

	<div class="grid grid-cols-2 md:grid-cols-5">
		<div class="font-bold">Game Mode</div>
		<div class="text-right font-bold">Leaderboards</div>
		<div class="text-right font-bold hidden md:block">Players</div>
		<div class="text-right font-bold hidden md:block">Scores</div>
		<div class="text-right font-bold hidden md:block">Submissions*</div>

		@foreach (GameMode gameMode in _gameModes)
		{
			<div>@gameMode.ToCore().ToDisplayString()</div>
			<div class="text-right">@GetTotalCustomLeaderboardData.LeaderboardsPerGameMode[gameMode].ToString("N0")</div>
			<div class="text-right hidden md:block">@GetTotalCustomLeaderboardData.PlayersPerGameMode[gameMode].ToString("N0")</div>
			<div class="text-right hidden md:block">@GetTotalCustomLeaderboardData.ScoresPerGameMode[gameMode].ToString("N0")</div>
			<div class="text-right hidden md:block">@GetTotalCustomLeaderboardData.SubmitsPerGameMode[gameMode].ToString("N0")</div>
		}

		<div class="font-bold">Total</div>
		<div class="text-right font-bold">@GetTotalCustomLeaderboardData.LeaderboardsPerGameMode.Values.Sum().ToString("N0")</div>
		<div class="text-right font-bold hidden md:block">@GetTotalCustomLeaderboardData.TotalPlayers.ToString("N0")</div>
		<div class="text-right font-bold hidden md:block">@GetTotalCustomLeaderboardData.ScoresPerGameMode.Values.Sum().ToString("N0")</div>
		<div class="text-right font-bold hidden md:block">@GetTotalCustomLeaderboardData.SubmitsPerGameMode.Values.Sum().ToString("N0")</div>
	</div>

	<i class="inline-block mt-3 hidden md:block">* Submissions are counted since @Constants.TrackingCustomLeaderboardSubmitCounts.ToString(StringFormats.DateFormat).</i>
}
