@page "/wiki/enemies"
@using DevilDaggersInfo.Core.Wiki.Extensions
@using DevilDaggersInfo.Types.Core.Wiki

@{
	IReadOnlyList<Enemy> enemies = Enemies.GetEnemies(GameConstants.CurrentVersion).Append(EnemiesV2_0.Andras).ToList();
	IReadOnlyList<Upgrade> upgrades = Upgrades.GetUpgrades(GameConstants.CurrentVersion);

	List<Enemy> enemiesDamageStats = new();
	foreach (Enemy enemy in enemies)
	{
		if (enemy.Gems > 1)
		{
			enemiesDamageStats.Add(enemy with
			{
				Name = $"{enemy.Name} (Gem)",
				Hp = enemy.Hp / enemy.Gems,
			});
		}
		else
		{
			enemiesDamageStats.Add(enemy);
		}
	}
}

<Heading Title="Enemies"/>

<div class="grid gap-x-2 xl:gap-x-4 grid-cols-enemies-summary-xs md:grid-cols-enemies-summary-md lg:grid-cols-enemies-summary-lg">
	<div class="font-bold">Enemy</div>
	<div class="font-bold text-right">HP</div>
	<div class="font-bold text-right">Gems</div>
	<div class="font-bold">Death type</div>
	<div class="font-bold hidden md:block">Appearances</div>
	<div class="font-bold hidden md:block text-right">First spawn</div>
	<div class="font-bold hidden lg:block">Spawned by</div>
</div>

@foreach (Enemy enemy in enemies)
{
	<div class="grid gap-x-2 xl:gap-x-4 grid-cols-enemies-summary-xs md:grid-cols-enemies-summary-md lg:grid-cols-enemies-summary-lg">
		<div>@MarkupUtils.EnemyString(enemy)</div>
		<div class="text-right">@enemy.Hp</div>
		<div class="text-right">@enemy.Gems</div>
		<div>@MarkupUtils.DeathString(enemy.Death)</div>
		<div class="hidden md:block">
			@foreach (GameVersion gv in Enemies.GetAppearances(enemy.Name))
			{
				@gv.ToDisplayString()
				@MarkupStrings.Space
			}
		</div>
		<div class="hidden md:block text-right">@(enemy.FirstSpawnSecond.HasValue ? new(enemy.FirstSpawnSecond.Value.ToString(StringFormats.TimeFormat)) : MarkupStrings.NoDataMarkup)</div>
		<div class="hidden lg:block">
			@if (enemy.SpawnedBy.Length == 0)
			{
				<span>Game</span>
			}
			else
			{
				foreach (Enemy e in enemy.SpawnedBy)
				{
					@MarkupUtils.EnemyString(e)
					@MarkupStrings.Space
				}
			}
		</div>
	</div>
}

<div class="hidden lg:block">
	<Heading Title="Damage Statistics" Level="2"/>

	<p class="para">All of this information assumes 100% shot accuracy, and may not be relevant in some cases.</p>

	<div class="grid gap-x-4 grid-cols-enemies-damage-stats-lg">
		<div>Enemy</div>
		<div class="text-right">HP</div>
		<div class="text-right col-span-4">Spray (seconds)</div>
		<div class="text-right col-span-4">Shots</div>
	</div>
	<div class="grid gap-x-4 grid-cols-enemies-damage-stats-lg">
		<div class="col-span-2"></div>
		@foreach (Upgrade upgrade in upgrades)
		{
			<div class="text-right">@MarkupUtils.UpgradeString(upgrade)</div>
		}
		@foreach (Upgrade upgrade in upgrades)
		{
			<div class="text-right">@MarkupUtils.UpgradeString(upgrade)</div>
		}
	</div>
	<div class="grid gap-x-4 grid-cols-enemies-damage-stats-lg">
		@foreach (Enemy enemy in enemiesDamageStats)
		{
			<div>@MarkupUtils.EnemyString(enemy)</div>
			<div class="text-right">@enemy.Hp</div>
			@foreach (Upgrade upgrade in upgrades)
			{
				<div class="text-right">@((enemy.Hp / upgrade.DefaultDamage.DaggersPerSpraySecond).ToString("0.00"))</div>
			}
			@foreach (Upgrade upgrade in upgrades)
			{
				<div class="text-right">@(Math.Ceiling(enemy.Hp / (double)upgrade.DefaultDamage.DaggersPerShot))</div>
			}
		}
	</div>
</div>

<Heading Title="Homing Daggers" Level="2"/>

<ul class="pl-4">
	<li class="list-disc">All homing daggers cause 10 damage to most enemies.</li>
	<li class="list-disc">@MarkupUtils.EnemyString(EnemiesV3_2.Leviathan) and @MarkupUtils.EnemyString(EnemiesV3_2.TheOrb) only take 1 damage from homing daggers. This used to happen to @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg1) and @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg2) as well, but this was fixed in V3.2.</li>
	<li class="list-disc">@MarkupUtils.EnemyString(EnemiesV3_2.TheOrb), @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg1), and @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg2) are the only enemies that are not targeted by any homing daggers.</li>
	<li class="list-disc">@MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers cause splash damage. This means that when they're destroyed, they create a little explosion that can cause damage to near enemies. For example, you only need one @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing dagger to kill a @MarkupUtils.EnemyString(EnemiesV3_2.Squid2), as the explosion will destroy the other gem.</li>
	<li class="list-disc">Even though @MarkupUtils.EnemyString(EnemiesV3_2.Ghostpede) cannot be damaged by homing daggers (they phase through it), it can still take damage from @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing dagger splash damage.</li>
	<li class="list-disc">You need 3 @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers to kill a @MarkupUtils.EnemyString(EnemiesV3_2.Squid3) gem, but only 1 @MarkupUtils.UpgradeString(UpgradesV3_2.Level3) homing dagger.</li>
	<li class="list-disc">You used to need 10 @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers to kill a single @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull1), while one single @MarkupUtils.UpgradeString(UpgradesV3_2.Level3) homing dagger could kill 4 of them. This was fixed in V3.2, and now both @MarkupUtils.UpgradeString(UpgradesV3_2.Level3) and @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers can kill exactly one @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull1).</li>
</ul>

<div class="hidden lg:block">
	<Heading Title="Homing Damage Statistics" Level="2"/>

	<div class="grid gap-x-4 grid-cols-7">
		<div>Enemy</div>
		<div class="text-right">HP</div>
		<div class="text-right">Level 3</div>
		<div class="text-right">Level 4</div>
		<div class="text-right">Level 4 splash</div>
		<div class="text-right">Level 3 durability</div>
		<div class="text-right">Level 4 durability</div>
	</div>
	<div class="grid gap-x-4 grid-cols-7">
		@foreach (Enemy enemy in enemiesDamageStats)
		{
			<div>@MarkupUtils.EnemyString(enemy)</div>
			<div class="text-right">@enemy.Hp</div>
			<div class="text-right">@GetHomingDamage(enemy.HomingDamage.FromLevel3, enemy.Hp)</div>
			<div class="text-right">@GetHomingDamage(enemy.HomingDamage.FromLevel4, enemy.Hp)</div>
			<div class="text-right">@GetHomingDamage(enemy.HomingDamage.FromLevel4Splash, enemy.Hp)</div>
			<div class="text-right">@GetHomingDurability(enemy.HomingDamage.ToLevel3)</div>
			<div class="text-right">@GetHomingDurability(enemy.HomingDamage.ToLevel4)</div>
		}
	</div>
</div>

<Heading Title="Transmuted Skulls" Level="2"/>

<ul class="pl-4">
	<li class="list-disc">When @MarkupUtils.EnemyString(EnemiesV3_2.Leviathan) and @MarkupUtils.EnemyString(EnemiesV3_2.TheOrb) beckon, they will attract and transmute all skulls in the arena that touch the beckon ring.</li>
	<li class="list-disc">When the skulls are sucked up and thrown back into the arena, they are 'transmuted', which means they have a different appearance and more HP. Their speed is also changed slightly (except @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull4)).</li>
	<li class="list-disc">Damaging a skull that is about to be transmuted is useless if it is not killed; the HP will reset to the transmuted skull's full HP.</li>
	<li class="list-disc">
		In V1, @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull1) and @MarkupUtils.EnemyString(EnemiesV3_2.Skull4) did not exist, so
		@MarkupUtils.EnemyString(EnemiesV3_2.Skull1) was turned into @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull2),
		@MarkupUtils.EnemyString(EnemiesV3_2.Skull2) was turned into @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull3), and
		@MarkupUtils.EnemyString(EnemiesV3_2.Skull3) was turned into @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull4).
	</li>
</ul>

@code
{
	private static MarkupString GetHomingDamage(int damage, int hp)
	{
		if (damage == 0) 
			return MarkupStrings.NoDataMarkup;
			
		if (damage >= hp)
			return new("<span style='color: #f88;'>Instant</span>");
		
		return new(damage.ToString());
	}
	
	private static MarkupString GetHomingDurability(float durability) => durability switch
	{
		0 => MarkupStrings.NoDataMarkup,
		1 => new("<span style='color: #f88;'>Instant</span>"),
		_ => new(durability.ToString("0%")),
	};
}
