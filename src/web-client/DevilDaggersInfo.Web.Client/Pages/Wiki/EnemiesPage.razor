@page "/wiki/enemies"
@using DevilDaggersInfo.Core.Wiki.Enums
@using DevilDaggersInfo.Core.Wiki.Extensions

<Heading Title="Enemies" />

<SelectList CssWidthClass="w-48" CssOpenerClass="pl-2" TValue="GameVersion" Values="@_allowedGameVersions" DisplayFunction="@(gv => gv.ToDisplayString())" Default="GameVersion.V3_2" Selected="@(gv => UpdateGameVersion(gv))" />

<Heading Title="Summary" Level="2" />

<div class="grid gap-x-2 xl:gap-x-4 grid-cols-enemies-summary-xs md:grid-cols-enemies-summary-md lg:grid-cols-enemies-summary-lg">
	<div class="font-bold">Enemy</div>
	<div class="font-bold text-right">HP</div>
	<div class="font-bold text-right">Gems</div>
	<div class="font-bold">Death type</div>
	<div class="font-bold hidden md:block">Appearances</div>
	<div class="font-bold hidden md:block text-right">First spawn</div>
	<div class="font-bold hidden lg:block text-right">Level 3 homing</div>
	<div class="font-bold hidden lg:block text-right">Level 4 homing</div>
	<div class="font-bold hidden lg:block">Spawned by</div>
</div>

@foreach (Enemy enemy in Enemies.GetEnemies(GameVersion))
{
	<div class="grid gap-x-2 xl:gap-x-4 grid-cols-enemies-summary-xs md:grid-cols-enemies-summary-md lg:grid-cols-enemies-summary-lg">
		<div>@MarkupUtils.EnemyString(enemy)</div>
		<div class="text-right">@enemy.Hp</div>
		<div class="text-right">@enemy.Gems</div>
		<div>@MarkupUtils.DeathString(enemy.Death)</div>
		<div class="hidden md:block">
			@foreach (GameVersion gv in Enemies.GetAppearances(enemy.Name))
			{
				@gv.ToDisplayString()
				@MarkupStrings.Space
			}
		</div>
		<div class="hidden md:block text-right">@(enemy.FirstSpawnSecond.HasValue ? new MarkupString(enemy.FirstSpawnSecond.Value.ToString(StringFormats.TimeFormat)) : MarkupStrings.NoDataMarkup)</div>
		<div class="hidden lg:block text-right">@(enemy.HomingDamage.Level3HomingDaggers.HasValue ? new MarkupString(enemy.HomingDamage.Level3HomingDaggers.Value.ToString()) : MarkupStrings.NoDataMarkup)</div>
		<div class="hidden lg:block text-right">@(enemy.HomingDamage.Level4HomingDaggers.HasValue ? new MarkupString(enemy.HomingDamage.Level4HomingDaggers.Value.ToString()) : MarkupStrings.NoDataMarkup)</div>
		<div class="hidden lg:block">
			@if (enemy.SpawnedBy.Length == 0)
			{
				<span>Game</span>
			}
			else
			{
				foreach (Enemy e in enemy.SpawnedBy)
				{
					@MarkupUtils.EnemyString(e)
					@MarkupStrings.Space
				}
			}
		</div>
	</div>
}

<Heading Title="Details" Level="2" />

<div class="grid gap-4 grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
	@foreach (Enemy enemy in Enemies.GetEnemies(GameVersion))
	{
		string image = enemy.GetImageName();
		if (enemy == EnemiesV1_0.Gigapede || enemy == EnemiesV2_0.Gigapede)
		{
			image = $"{image}-red";
		}

		string hexColor = enemy.Color.HexCode;
		string hpString = enemy.Gems > 1 ? $"{enemy.Hp} {enemy.GetGemHpString()}" : enemy.Hp.ToString();
		<div class="p-2 border-2" style="@($"border-color: {hexColor};")">
			<div>@MarkupUtils.EnemyString(enemy)</div>
			<img src='images/wiki/enemies/@(image).png' />
			<div class="grid grid-cols-2">
				<div>HP</div>
				<div>@hpString</div>
				<div>Gems</div>
				<div>@enemy.Gems</div>
				<div>Death type</div>
				<div>@MarkupUtils.DeathString(enemy.Death)</div>
				<div>First appearance</div>
				<div>@Enemies.GetFirstAppearance(enemy.Name)?.ToDisplayString()</div>
				<div>First spawn</div>
				<div>@(enemy.FirstSpawnSecond.HasValue ? new MarkupString(enemy.FirstSpawnSecond.Value.ToString(StringFormats.TimeFormat)) : MarkupStrings.NoDataMarkup)</div>
				<div>Level 3 homing</div>
				<div>@(enemy.HomingDamage.Level3HomingDaggers.HasValue ? new MarkupString(enemy.HomingDamage.Level3HomingDaggers.Value.ToString()) : MarkupStrings.NoDataMarkup)</div>
				<div>Level 4 homing</div>
				<div>@(enemy.HomingDamage.Level4HomingDaggers.HasValue ? new MarkupString(enemy.HomingDamage.Level4HomingDaggers.Value.ToString()) : MarkupStrings.NoDataMarkup)</div>
				<div>Spawned by</div>
				<div>
					@if (enemy.SpawnedBy.Length == 0)
					{
						<span>Game</span>
					}
					else
					{
						foreach (Enemy e in enemy.SpawnedBy)
						{
							@MarkupUtils.EnemyString(e)
							@MarkupStrings.Space
						}
					}
				</div>
				<div>Behavior</div>
				<div>
					<ul class="pl-4">
						@foreach (string description in EnemyDescriptions.GetEnemyDescription(enemy))
						{
							<li class="list-disc">@description</li>
						}
					</ul>
				</div>
			</div>
		</div>
	}
</div>

<div class="hidden lg:block">
	<Heading Title="Damage Statistics" Level="2" />

	<p class="para">All of this information assumes 100% shot accuracy, and may not be relevant in some cases.</p>

	@{
		List<Upgrade> upgrades = Upgrades.GetUpgrades(GameVersion);
		string gridCols = GameVersion == GameVersion.V1_0 ? "grid-cols-enemies-damage-stats-lg-v1" : "grid-cols-enemies-damage-stats-lg";
		string colSpan = GameVersion == GameVersion.V1_0 ? "col-span-3" : "col-span-4";
	}
	<div class="grid gap-x-4 grid-cols-2 @gridCols">
		<div>Enemy</div>
		<div class="text-right">HP</div>
		<div class="text-right @colSpan">Spray (seconds)</div>
		<div class="text-right @colSpan">Shots</div>
		<div class="text-right @(GameVersion == GameVersion.V1_0 ? string.Empty : "col-span-2")">Homing daggers</div>
	</div>
	<div class="grid gap-x-4 grid-cols-2 @gridCols">
		<div class="col-span-2"></div>
		@foreach (Upgrade upgrade in upgrades)
		{
			<div class="text-right">@MarkupUtils.UpgradeString(upgrade)</div>
		}
		@foreach (Upgrade upgrade in upgrades)
		{
			<div class="text-right">@MarkupUtils.UpgradeString(upgrade)</div>
		}
		@foreach (Upgrade upgrade in upgrades.Where(u => u.HomingDamage.HasValue))
		{
			<div class="text-right">@MarkupUtils.UpgradeString(upgrade)</div>
		}
	</div>
	<div class="grid gap-x-4 grid-cols-2 @gridCols">
		@{
			List<Enemy> all = new();
			foreach (Enemy enemy in Enemies.GetEnemies(GameVersion))
			{
				all.Add(enemy);
				if (enemy.Gems > 1)
				{
					all.Add(enemy with
					{
						Name = $"{enemy.Name} (Gem)",
						Hp = enemy.Hp / enemy.Gems,
						HomingDamage = new()
						{
							Level3HomingDaggers = enemy.HomingDamage.Level3HomingDaggers / enemy.Gems,
							Level4HomingDaggers = enemy.HomingDamage.Level4HomingDaggers / enemy.Gems,
						},
					});
				}
			}
			foreach (Enemy enemy in all)
			{
				<div>@MarkupUtils.EnemyString(enemy)</div>
				<div class="text-right">@enemy.Hp</div>
				@foreach (Upgrade upgrade in upgrades)
				{
					<div class="text-right">@((enemy.Hp / upgrade.DefaultDamage.DaggersPerSpraySecond).ToString("0.00"))</div>
				}
				@foreach (Upgrade upgrade in upgrades)
				{
					<div class="text-right">@(Math.Ceiling(enemy.Hp / (double)upgrade.DefaultDamage.DaggersPerShot))</div>
				}
				<div class="text-right">@(enemy.HomingDamage.Level3HomingDaggers.HasValue ? new MarkupString(enemy.HomingDamage.Level3HomingDaggers.Value.ToString()) : MarkupStrings.NoDataMarkup)</div>
				@if (GameVersion != GameVersion.V1_0)
				{
					<div class="text-right">@(enemy.HomingDamage.Level4HomingDaggers.HasValue ? new MarkupString(enemy.HomingDamage.Level4HomingDaggers.Value.ToString()) : MarkupStrings.NoDataMarkup)</div>
				}
			}
		}
	</div>
</div>

<Heading Title="Transmuted Skulls" Level="2" />

<ul class="pl-4">
	@{
		Enemy? levi = Enemies.GetEnemyByName(GameVersion, "Leviathan");
		Enemy? orb = Enemies.GetEnemyByName(GameVersion, "The Orb");
		MarkupString? leviString = levi.HasValue ? MarkupUtils.EnemyString(levi.Value) : null;
		MarkupString? orbString = orb.HasValue ? MarkupUtils.EnemyString(orb.Value) : null;
		MarkupString transmuters = GameVersion is GameVersion.V1_0 or GameVersion.V2_0 ? new(leviString + " beckons, it") : new(leviString + " or " + orbString + " beckon, they");

		Dictionary<Enemy, Enemy> transmutations = GameVersion == GameVersion.V1_0 ? new()
			{
				[EnemiesV1_0.Skull1] = EnemiesV1_0.TransmutedSkull2,
				[EnemiesV1_0.Skull2] = EnemiesV1_0.TransmutedSkull3,
				[EnemiesV1_0.Skull3] = EnemiesV1_0.TransmutedSkull4,
			}
		: new()
			{
				[Enemies.GetEnemyByName(GameVersion, "Skull I")!.Value] = Enemies.GetEnemyByName(GameVersion, "Transmuted Skull I")!.Value,
				[Enemies.GetEnemyByName(GameVersion, "Skull II")!.Value] = Enemies.GetEnemyByName(GameVersion, "Transmuted Skull II")!.Value,
				[Enemies.GetEnemyByName(GameVersion, "Skull III")!.Value] = Enemies.GetEnemyByName(GameVersion, "Transmuted Skull III")!.Value,
				[Enemies.GetEnemyByName(GameVersion, "Skull IV")!.Value] = Enemies.GetEnemyByName(GameVersion, "Transmuted Skull IV")!.Value,
			};

		<li class="list-disc">When @transmuters will attract and transmute all skulls in the arena that touch the beckon ring.</li>
		<li class="list-disc">When the skulls are sucked up and thrown back into the arena, they are 'transmuted', which means they have a different appearance and more HP. @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull3) also seems to turn faster.</li>
		<li class="list-disc">Damaging a skull that is about to be transmuted is useless if it is not killed; the HP will reset to the transmuted skull's full HP.</li>
		<li class="list-disc">
			Here is the list of which skull turns into which transmuted skull (this differs between game versions):
			<ul class="pl-4">
				@foreach (KeyValuePair<Enemy, Enemy> transmutation in transmutations)
				{
					<li class="list-disc">@MarkupUtils.EnemyString(transmutation.Key) is turned into @MarkupUtils.EnemyString(transmutation.Value)</li>
				}
			</ul>
		</li>
	}
</ul>

@{
	if (GameVersion >= GameVersion.V3_0)
	{
		<Heading Title="Homing Daggers" Level="2" />
		<ul class="pl-4">
			<li class="list-disc">All homing daggers cause 10 damage to most enemies.</li>
			<li class="list-disc">@MarkupUtils.EnemyString(EnemiesV3_2.Leviathan) and @MarkupUtils.EnemyString(EnemiesV3_2.TheOrb) only take 1 damage from homing daggers. This used to happen to @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg1) and @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg2) as well, but this was fixed in V3.2.</li>
			<li class="list-disc">@MarkupUtils.EnemyString(EnemiesV3_2.TheOrb), @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg1), and @MarkupUtils.EnemyString(EnemiesV3_2.SpiderEgg2) are the only enemies that are not targeted by any homing daggers.</li>
			<li class="list-disc">@MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers cause splash damage. This means that when they're destroyed, they create a little explosion that can cause damage (most likely 10) to near enemies. For example, you only need one @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing dagger to kill a @MarkupUtils.EnemyString(EnemiesV3_2.Squid2), as the explosion will destroy the other gem.</li>
			<li class="list-disc">Even though @MarkupUtils.EnemyString(EnemiesV3_2.Ghostpede) cannot be damaged by homing daggers (they phase through it), it can still take damage from @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing dagger splash damage.</li>
			<li class="list-disc">Not sure why you need 3 @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers to kill a @MarkupUtils.EnemyString(EnemiesV3_2.Squid3) gem, but only 1 @MarkupUtils.UpgradeString(UpgradesV3_2.Level3) homing dagger... Seems like a bug.</li>
			<li class="list-disc">Another bug was that you needed 10 @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers to kill a single @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull1), while one single @MarkupUtils.UpgradeString(UpgradesV3_2.Level3) homing dagger could kill 4 of them. This was fixed in V3.2 however, and now both @MarkupUtils.UpgradeString(UpgradesV3_2.Level3) and @MarkupUtils.UpgradeString(UpgradesV3_2.Level4) homing daggers can kill exactly one @MarkupUtils.EnemyString(EnemiesV3_2.TransmutedSkull1).</li>
		</ul>
	}
}
