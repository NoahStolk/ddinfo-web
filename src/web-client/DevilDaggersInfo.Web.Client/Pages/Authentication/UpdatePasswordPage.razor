@page "/authentication/update-password"
@using DevilDaggersInfo.Web.Client.Authentication
@using DevilDaggersInfo.Web.Client.Components
@using DevilDaggersInfo.Web.Client.StateObjects.Authentication
@using Microsoft.AspNetCore.Components
@inject MainApiHttpClient Http
@inject AdminAuthenticationStateProvider Auth
@inject NavigationManager Navigation

<Heading Title="Update Password" />

<EditForm Model="@StateObject" OnValidSubmit="@OnValidSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="text-red">@_serverError</div>

	<div class="grid gap-2 grid-cols-2 max-w-md">
		<span>Current password</span>
		<input class="bg-black border-gray-3 border-2" type="password" @bind="@StateObject.CurrentPassword" />
		<span>New password</span>
		<input class="bg-black border-gray-3 border-2" type="password" @bind="@StateObject.NewPassword" />
		<span>Repeat new password</span>
		<input class="bg-black border-gray-3 border-2" type="password" @bind="@StateObject.PasswordRepeated" />
	</div>

	<button class="btn btn-gray-light px-2 py-1" type="submit">Update</button>
</EditForm>

@code
{
	[Parameter]
	public UpdatePasswordRequestState StateObject { get; set; } = new();

	private string? _serverError;

	protected override async Task OnInitializedAsync()
	{
		AuthenticationState authenticationState = await Auth.GetAuthenticationStateAsync();
		StateObject.CurrentName = authenticationState.User.GetName() ?? string.Empty;
	}

	private async Task OnValidSubmit()
	{
		HttpResponseMessage httpResponseMessage = await Http.UpdatePassword(StateObject.ToModel());

		if (httpResponseMessage.StatusCode == HttpStatusCode.OK)
		{
			await Auth.SetTokenAsync(null);
			Navigation.NavigateTo("/authentication/login", true);
		}
		else
		{
			_serverError = await httpResponseMessage.Content.ReadAsStringAsync();
		}
	}
}
