@page "/profile/edit"
@using DevilDaggersInfo.Web.Client.Enums
@{
	const string disabledStyle = "disabled:opacity-50 cursor-default btn-disabled";
	const string enabledStyle = "btn-green";
}

<Heading Title="Edit Profile" />

@if (!_linked.HasValue)
{
	<Loading />
}
else if (!_linked.Value)
{
	<p class="para">
		This account is not linked to a profile. Visit the Discord server and ask a players maintainer to assign your Devil Daggers user to this account.
	</p>
}
else
{
	@if (Message != null)
	{
		string title = State switch
		{
			ErrorState.ValidationError => "Validation failed",
			ErrorState.FatalError => "Fatal error",
			_ => "Success",
		};

		ResultBarType type = State switch
		{
			ErrorState.ValidationError => ResultBarType.ValidationError,
			ErrorState.FatalError => ResultBarType.FatalError,
			_ => ResultBarType.Success,
		};

		<ResultBar Title="@title" ResultBarType="type" DismissEvent="Dismiss">
			@Message
		</ResultBar>
	}

	<EditForm Model="@_editPlayerState" OnValidSubmit="@OnValidSubmit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<InputWrapper Label="Country (flag)"><SearchDropdown TKey=string Values="@(UserUtils.CountryNames)" Converter="s => s" @bind-Value="@_editPlayerState.CountryCode" /></InputWrapper>
		<InputWrapper Label="DPI"><InputNumber class="text-lg w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayerState.Dpi" /></InputWrapper>
		<InputWrapper Label="In-game sens"><InputNumber class="text-lg w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="@_editPlayerState.InGameSens" /></InputWrapper>
		<InputWrapper Label="FOV"><InputNumber class="text-lg w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayerState.Fov" /></InputWrapper>
		<InputWrapper Label="Gamma"><InputNumber class="text-lg w-64 pl-2 bg-gray-1 text-color-text" @bind-Value="_editPlayerState.Gamma" /></InputWrapper>
		<InputWrapper Label="Hand"><InputNullableBoolean False="Left" True="Right" @bind-Value="@_editPlayerState.IsRightHanded" /></InputWrapper>
		<InputWrapper Label="Flash hand"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayerState.HasFlashHandEnabled" /></InputWrapper>
		<InputWrapper Label="Legacy audio"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayerState.UsesLegacyAudio" /></InputWrapper>
		<InputWrapper Label="HRTF"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayerState.UsesHrtf" /></InputWrapper>
		<InputWrapper Label="Invert Y"><InputNullableBoolean False="Off" True="On" @bind-Value="@_editPlayerState.UsesInvertY" /></InputWrapper>
		<InputWrapper Label="V-sync"><Dropdown TKey=VerticalSync Values="@(Enum.GetValues<VerticalSync>().ToDictionary(e => e, e => e.ToString()))" Converter="s => Enum.Parse<VerticalSync>(s)" ShowDisplayValue=false @bind-Value="@_editPlayerState.VerticalSync" /></InputWrapper>
		<InputWrapper Label="Hide my donations"><InputCheckbox @bind-Value="@_editPlayerState.HideDonations" /></InputWrapper>
		<InputWrapper Label="Hide my past usernames"><InputCheckbox @bind-Value="@_editPlayerState.HidePastUsernames" /></InputWrapper>
		<InputWrapper Label="Hide my game settings"><InputCheckbox @bind-Value="@_editPlayerState.HideSettings" /></InputWrapper>

		@{
			bool isValid = context.Validate();
		}
		<button class="text-lg btn my-2 px-2 py-1 @(isValid ? enabledStyle : disabledStyle)" type="submit" disabled="@(!isValid)" @onclick="Dismiss">Save</button>
	</EditForm>
}
