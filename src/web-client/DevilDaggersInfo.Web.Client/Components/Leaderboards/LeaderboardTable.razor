@using DevilDaggersInfo.Api.Main.Players
@typeparam TGetEntryDto

<div class="text-xl font-goethe">
	<div class="grid gap-3 grid-cols-leaderboard-sm md:grid-cols-leaderboard-md lg:grid-cols-leaderboard-lg xl:grid-cols-leaderboard-xl">
		<div @onclick="() => Sort(LeaderboardSorting.Rank)" class="text-right"><Tooltip Text="Sort by RANK"><img class="cursor-pointer inline-block" src="/images/icons/custom-x2/rank.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.Flag)" class="text-left"><Tooltip Text="Sort by FLAG"><img class="cursor-pointer inline-block" src="/images/icons/custom-x2/flag.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.Player)" class="text-left"><Tooltip Text="Sort by PLAYER"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/eye.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.Time)" class="text-right"><Tooltip Text="Sort by TIME"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/stopwatch.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.Kills)" class="text-right hidden md:block"><Tooltip Text="Sort by KILLS"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/dagger.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.Gems)" class="text-right hidden md:block"><Tooltip Text="Sort by GEMS"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/gem.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.Accuracy)" class="text-right hidden md:block"><Tooltip Text="Sort by ACCURACY"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/crosshair.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.DeathType)" class="text-left hidden lg:block"><Tooltip Text="Sort by DEATH TYPE"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/skull.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.TotalTime)" class="text-right hidden xl:block"><Tooltip Text="Sort by TOTAL TIME"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/stopwatch.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.TotalKills)" class="text-right hidden xl:block"><Tooltip Text="Sort by TOTAL KILLS"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/dagger.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.TotalGems)" class="text-right hidden xl:block"><Tooltip Text="Sort by TOTAL GEMS"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/gem.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.TotalAccuracy)" class="text-right hidden xl:block"><Tooltip Text="Sort by TOTAL ACCURACY"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/crosshair.png" /></Tooltip></div>
		<div @onclick="() => Sort(LeaderboardSorting.TotalDeaths)" class="text-right hidden xl:block"><Tooltip Position=TooltipPosition.Left Text="Sort by TOTAL DEATHS"><img class="cursor-pointer inline-block" src="/images/icons/mask-x2/skull.png" /></Tooltip></div>
	</div>
	<div>
		@{
			int i = 0;

			List<List<int>> groupsOfAlts = new();
			if (IsHistory)
			{
				foreach (GetPlayerForLeaderboard player in Players)
				{
					if (player.BanType == BanType.Alt && player.BanResponsibleId.HasValue)
					{
						List<int>? existingGroup = groupsOfAlts.FirstOrDefault(l => l.Contains(player.BanResponsibleId.Value));
						if (existingGroup == null)
							groupsOfAlts.Add(new() { player.Id, player.BanResponsibleId.Value });
						else
							existingGroup.Add(player.Id);
					}
				}
			}

			foreach (TGetEntryDto entry in Entries)
			{
				bool isBanned = false;

				GetPlayerForLeaderboard? player = Players.Find(p => p.Id == entry.Id);
				if (player != null)
				{
					// On the leaderboard history pages, we unban any alt with a higher score than the main.
					// The reason for this workaround is because pocket and Ravenholmzombies have submitted throughout the history on two different accounts.
					// This code makes sure the alts are banned properly in the history should this happen again.
					if (IsHistory)
					{
						if (player.BanType is BanType.NotBanned or BanType.Alt)
						{
							// When not banned or alt, we need to find the alts and determine if this account has the highest score.
							List<int>? mainAndAlts = groupsOfAlts.FirstOrDefault(l => l.Contains(player.Id) || player.BanResponsibleId.HasValue && l.Contains(player.BanResponsibleId.Value));
							TGetEntryDto? mainOrAltWithHighestScore = mainAndAlts == null ? null : mainAndAlts.ConvertAll(i => Entries.FirstOrDefault(e => e.Id == i)).Where(e => e != null).MaxBy(e => e!.Time);

							// If there are no alts, or for some reason the highest score cannot be determined, fallback to default banning behavior.
							// Otherwise, ban the main or alt with a lower score.
							if (mainOrAltWithHighestScore == null)
								isBanned = player.BanType != BanType.NotBanned;
							else
								isBanned = entry.Id != mainOrAltWithHighestScore.Id;
						}
						else
						{
							// Always ban other BanTypes (cheater, boosted, illegitimate stats, blank name).
							isBanned = true;
						}
					}
					// On the regular leaderboard page, we just ban literally by BanType, because determining higher scores can become problematic when browsing pages other than the first page (since we need to know the score of all the alts).
					// We could keep a cache of the alt scores, but this isn't worth it because we could instead just update the database to ban the user with the lower score and make the other one the "main" account by unbanning it.
					else
					{
						isBanned = player.BanType != BanType.NotBanned;
					}
				}

				Dagger dagger = Daggers.GetDaggerFromSeconds(GameVersion, entry.Time);
				string daggerCssClass = dagger.Name.ToLower();

				string kills = entry.Kills.ToString(StringFormats.LeaderboardIntFormat);
				string gems = entry.Gems.ToString(StringFormats.LeaderboardIntFormat);
				double accuracyValue = entry.DaggersFired == 0 ? 0 : entry.DaggersHit / (double)entry.DaggersFired;
				string accuracy = accuracyValue.ToString(StringFormats.AccuracyFormat);
				string daggers = FormatUtils.FormatDaggersInt32(entry.DaggersHit, entry.DaggersFired, IsHistory);
				MarkupString death = MarkupUtils.DeathString(entry.DeathType, GameVersion, "text-xl");

				string timeTotal = entry.TimeTotal.ToString(StringFormats.LeaderboardGlobalTimeFormat);
				string killsTotal = entry.KillsTotal.ToString(StringFormats.LeaderboardIntFormat);
				string gemsTotal = entry.GemsTotal.ToString(StringFormats.LeaderboardIntFormat);
				double accuracyValueTotal = entry.DaggersFiredTotal == 0 ? 0 : entry.DaggersHitTotal / (double)entry.DaggersFiredTotal;
				string accuracyTotal = accuracyValueTotal.ToString(StringFormats.AccuracyFormat);
				string daggersTotal = FormatUtils.FormatDaggersUInt64(entry.DaggersHitTotal, entry.DaggersFiredTotal, IsHistory);
				string deathsTotal = entry.DeathsTotal.ToString(StringFormats.LeaderboardIntFormat);

				bool grayBackground = i++ % 2 == 0;
				string? leviathanOffsetStyle = daggerCssClass == "leviathan" ? LeviathanAnimationUtils.GetStyle(Entries.Count, i) : null;

				<div class="grid gap-3 grid-cols-leaderboard-sm md:grid-cols-leaderboard-md lg:grid-cols-leaderboard-lg xl:grid-cols-leaderboard-xl h-6 cursor-pointer xl:cursor-default @(grayBackground ? "bg-gray-1" : string.Empty) @(isBanned ? "text-color-ban" : string.Empty)" @onclick="() => Expand(entry.Id)">
					<EntryRank PlayerId="@entry.Id" Rank="@entry.Rank" />
					<EntryFlag CountryCode="@player?.CountryCode" />
					<EntryUsername DaggerCssClass="@daggerCssClass" LeviathanOffsetStyle="@leviathanOffsetStyle" Id="entry.Id" Name="@entry.Username" IsBanned="isBanned" />
					<div class="text-right @(isBanned ? string.Empty : daggerCssClass)" style="@leviathanOffsetStyle">@entry.Time.ToString(StringFormats.TimeFormat)</div>
					<div class="text-right hidden md:block">@kills</div>
					<div class="text-right hidden md:block">@gems</div>
					<div class="text-right hidden md:block">
						<Tooltip Text="@daggers"><span class="font-goethe text-xl cursor-pointer">@accuracy</span></Tooltip>
					</div>
					<div class="text-left hidden lg:block">@death</div>
					<div class="text-right hidden xl:block">@timeTotal</div>
					<div class="text-right hidden xl:block">@killsTotal</div>
					<div class="text-right hidden xl:block">@gemsTotal</div>
					<div class="text-right hidden xl:block">
						<Tooltip Text="@daggersTotal"><span class="font-goethe text-xl cursor-pointer">@accuracyTotal</span></Tooltip>
					</div>
					<div class="text-right hidden xl:block">@deathsTotal</div>
				</div>
				<div class="grid grid-cols-2 @(entry.Id == _expandedId ? (grayBackground ? "bg-gray-1" : string.Empty) : "hidden") pl-[128px] pr-1">
					<div class="md:hidden">Kills</div>
					<div class="md:hidden text-right">@kills</div>
					<div class="md:hidden">Gems</div>
					<div class="md:hidden text-right">@gems</div>
					<div class="md:hidden">Accuracy</div>
					<div class="md:hidden text-right">
						<Tooltip Text="@daggers" Position="TooltipPosition.Left"><span class="text-right font-goethe text-xl cursor-pointer">@accuracy</span></Tooltip>
					</div>
					<div class="lg:hidden">Death Type</div>
					<div class="lg:hidden text-right">@death</div>

					<div class="xl:hidden">Total Time</div>
					<div class="xl:hidden text-right">@timeTotal</div>
					<div class="xl:hidden">Total Kills</div>
					<div class="xl:hidden text-right">@killsTotal</div>
					<div class="xl:hidden">Total Gems</div>
					<div class="xl:hidden text-right">@gemsTotal</div>
					<div class="xl:hidden">Total Accuracy</div>
					<div class="xl:hidden text-right">
						<Tooltip Text="@daggersTotal" Position="TooltipPosition.Left"><span class="text-right font-goethe text-xl cursor-pointer">@accuracyTotal</span></Tooltip>
					</div>
					<div class="xl:hidden">Total Deaths</div>
					<div class="xl:hidden text-right">@deathsTotal</div>
				</div>
			}
		}
	</div>
</div>
