@typeparam TValue

<OutsideClickHandler OnClickOutside="OnClickOutside" CssClass="@($"inline-block text-color-text {CssClass} {CssWidthClass}")">
	<div class="w-full h-full input-list-opener @CssOpenerClass" @onclick="e => _show = !_show">
		@DisplayFunction(CurrentValue)
	</div>
	<div class="@(_show ? "absolute" : "hidden") z-10">
		<ul class="border-[#fff8] border-2 max-h-screen-half @CssWidthClass">
			@{
				foreach (TValue value in Values)
				{
					<li class="input-list-entry" @onclick="e => Select(value)">@DisplayFunction(value)</li>
				}
			}
		</ul>
	</div>
</OutsideClickHandler>

@code
{
	private bool _show = false;

	[Parameter]
	[EditorRequired]
	public IReadOnlyList<TValue> Values { get; set; } = null!;

	[Parameter]
	[EditorRequired]
	public TValue Default { get; set; } = default!;

	[Parameter]
	[EditorRequired]
	public Func<TValue, string> DisplayFunction { get; set; } = null!;

	[Parameter]
	[EditorRequired]
	public EventCallback<TValue> Selected { get; set; }

	[Parameter]
	public string? CssClass { get; set; }

	[Parameter]
	public string? CssWidthClass { get; set; } = "w-16";

	[Parameter]
	public string? CssOpenerClass { get; set; }

	public TValue CurrentValue { get; set; } = default!;

	protected override void OnInitialized()
	{
		CurrentValue = Default;
	}

	private void OnClickOutside()
	{
		_show = false;
		StateHasChanged();
	}

	private async Task Select(TValue value)
	{
		CurrentValue = value;
		_show = false;
		await Selected.InvokeAsync(value);
		StateHasChanged();
	}
}
