@using System.Globalization

<div class="bg-gray-1 max-w-sm text-center py-2">
	<button class="btn btn-gray-light w-10 h-10" @onclick="PreviousYear">@MarkupStrings.NavPrevDouble</button>
	<button class="btn btn-gray-light w-10 h-10" @onclick="PreviousMonth">@MarkupStrings.NavPrev</button>
	<div class="inline-block">
		<div class="text-center">@_year</div>
		<div class="text-center text-sm">@_monthNames[_month - 1]</div>
	</div>
	<button class="btn btn-gray-light w-10 h-10" @onclick="NextMonth">@MarkupStrings.NavNext</button>
	<button class="btn btn-gray-light w-10 h-10" @onclick="NextYear">@MarkupStrings.NavNextDouble</button>

	@{
		int daysInMonth = DateTime.DaysInMonth(_year, _month);
		DayOfWeek dayOfWeek = new DateTime(_year, _month, 1).DayOfWeek;
		int currentDay = 1;
		bool started = false;
		<table class="table-fixed mx-auto">
			<thead>
				<tr>
					@for (int i = 0; i < 7; i++)
					{
						<td class="text-center">@(((DayOfWeek)((i + 1) % 7)).ToString()[..2])</td>
					}
				</tr>
			</thead>
			<tbody>
				@for (int i = 0; i < 6; i++)
				{
					<tr>
						@for (int j = 0; j < 7; j++)
						{
							if (dayOfWeek == (DayOfWeek)((j + 1) % 7))
								started = true;

							if (started && currentDay <= daysInMonth)
							{
								int day = currentDay;
								<td class="@(day == _day ? "bg-gray-3" : string.Empty) hover:bg-gray-5 cursor-pointer text-center p-2" @onclick="() => _day = day">@day</td>
								currentDay++;
							}
							else
							{
								<td class="text-gray-4 p-2">x</td>
							}
						}
					</tr>
				}
			</tbody>
		</table>
	}

	<button class="btn btn-gray-light h-10 px-2" @onclick="@UpdateComponent">Show</button>
</div>

@code {
	private static readonly string[] _monthNames = CultureInfo.InvariantCulture.DateTimeFormat.MonthNames.Take(12).Select(s => s[..3]).ToArray();

	[Parameter, EditorRequired] public EventCallback<DateTime> DateSelected { get; set; }

	private int _year = DateTime.UtcNow.Year;
	private int _month = DateTime.UtcNow.Month;
	private int _day = DateTime.UtcNow.Day;

	private async Task UpdateComponent()
	{
		await DateSelected.InvokeAsync(new(_year, _month, _day));
	}

	private void NextYear() => _year = Math.Min(DateTime.MaxValue.Year, _year + 1);

	private void PreviousYear() => _year = Math.Max(DateTime.MinValue.Year, _year - 1);

	private void NextMonth()
	{
		if (_month < 12)
		{
			_month++;
		}
		else
		{
			_month = 1;
			NextYear();
		}
	}

	private void PreviousMonth()
	{
		if (_month > 1)
		{
			_month--;
		}
		else
		{
			_month = 12;
			PreviousYear();
		}
	}
}
