<li class="@ActiveClass">
	<NavLink class="@Class" href="@Href" Match="Match" @onclick="CloseMenu">
		<NavIcon Type="@IconType" Text="@Text" />
	</NavLink>
</li>

@code
{
	[Inject]
	public required NavigationManager NavigationManager { get; set; }

	[CascadingParameter(Name = nameof(NavMenu))]
	public required NavMenu NavMenu { get; set; }

	[CascadingParameter(Name = nameof(NavDropdown))]
	public NavDropdown? NavDropdown { get; set; }

	[Parameter]
	[EditorRequired]
	public required string Href { get; set; }
	
	[Parameter]
	[EditorRequired]
	public required string IconType { get; set; }
	
	[Parameter]
	[EditorRequired]
	public required string Text { get; set; }
	
	[Parameter]
	public NavLinkMatch Match { get; set; } = NavLinkMatch.All;

	public string? ActiveClass { get; set; }

	public string Class => $"{(NavDropdown != null ? "px-2" : "pl-3")} py-1 transition-all duration-150 ease-in-out whitespace-nowrap overflow-x-hidden text-xl text-color-text sm:hover:bg-dark-red block w-full";

	protected override void OnInitialized()
	{
		ActiveClass = GetActive(Href, Match);

		NavigationManager.LocationChanged += (_, _) =>
		{
			ActiveClass = GetActive(Href, Match);
			StateHasChanged();
		};
	}

	private void CloseMenu()
	{
		NavMenu.ShowNavMenuMobile = false;
		NavMenu.UpdateState();
	}

	private bool IsActive(string href, NavLinkMatch navLinkMatch)
	{
		string relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
		return navLinkMatch switch
		{
			NavLinkMatch.All => string.Equals(relativePath, href, StringComparison.OrdinalIgnoreCase),
			_ => relativePath.StartsWith(href, StringComparison.OrdinalIgnoreCase),
		};
	}

	private string? GetActive(string href, NavLinkMatch navLinkMatch)
	{
		bool isActive = IsActive(href, navLinkMatch);

		if (isActive)
			NavMenu.SetActive(NavDropdown);

		return isActive ? "bg-dark-red" : null;
	}
}
