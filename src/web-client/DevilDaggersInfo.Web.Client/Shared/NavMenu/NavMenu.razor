@using DevilDaggersInfo.Web.Core.Claims
@inject AuthenticationStateProvider Auth

<div class="px-4 py-2 sm:hidden">
	<a href="" class="font-goethe text-3xl text-red">DevilDaggers.info</a>
	<button class="float-right sm:hidden text-xl pt-1" @onclick="() => ShowNavMenuMobile = !ShowNavMenuMobile">
		<span class="oi oi-menu" aria-hidden="true"></span>
	</button>
</div>

<div class="@(ShowNavMenuMobile ? null : "hidden sm:block") @(ExpandNavMenu ? "sm:w-48" : "sm:w-12") py-2 font-goethe transition-width duration-150 ease-in-out sm:h-screen" @onmouseleave="@OnMouseOut" @onmouseenter="@OnMouseOver">
	<ul>
		<CascadingValue Value="this" Name="NavMenu">
			<NavItem Href="" IconType="home" Text="Home" />
			<NavDropdown Text="Leaderboard" IconType="clock">
				<NavItem Href="leaderboard" IconType="clock" Text="Leaderboard" />
				<NavItem Href="leaderboard/search" IconType="magnifying-glass" Text="Search" />
				<NavItem Href="leaderboard/statistics" IconType="bar-chart" Text="Statistics" />
				<NavItem Href="leaderboard/history" IconType="book" Text="History" />
				<NavItem Href="leaderboard/history/statistics" IconType="graph" Text="History Statistics" />
				<NavItem Href="leaderboard/world-record-progression" IconType="star" Text="World Records" />
				<NavItem Href="leaderboard/player-settings" IconType="cog" Text="Player Settings" />
			</NavDropdown>
			<NavDropdown Text="Custom" IconType="brush">
				<NavItem Href="custom/spawnsets" IconType="grid-three-up" Text="Spawnsets" />
				<NavItem Href="custom/leaderboards" IconType="clock" Text="Leaderboards" />
				<NavItem Href="custom/mods" IconType="brush" Text="Mods" />
			</NavDropdown>
			<NavDropdown Text="Tools" IconType="pencil">
				<NavItem Href="tools/survival-editor" IconType="grid-three-up" Text="Survival Editor" />
				<NavItem Href="tools/custom-leaderboards" IconType="clock" Text="Custom Leaderboards" />
				<NavItem Href="tools/asset-editor" IconType="brush" Text="Asset Editor" />
				<NavItem Href="tools/replay-editor" IconType="media-play" Text="Replay Editor" />
			</NavDropdown>
			<NavDropdown Text="Wiki" IconType="info">
				<NavItem Href="wiki/spawns" IconType="fire" Text="Spawns" />
				<NavItem Href="wiki/upgrades" IconType="bolt" Text="Upgrades" />
				<NavItem Href="wiki/enemies" IconType="eye" Text="Enemies" />
				<NavItem Href="wiki/daggers" IconType="arrow-bottom" Text="Daggers" />
				<NavItem Href="wiki/assets" IconType="file" Text="Assets" />
			</NavDropdown>
			<NavDropdown Text="Guides" IconType="book">
				<NavItem Href="guides/using-spawnsets" IconType="grid-three-up" Text="Using Spawnsets" />
				<NavItem Href="guides/creating-spawnsets" IconType="grid-three-up" Text="Creating Spawnsets" />
				<NavItem Href="guides/using-mods" IconType="brush" Text="Using Mods" />
				<NavItem Href="guides/creating-mods" IconType="brush" Text="Creating Mods" />
			</NavDropdown>
			<NavDropdown Text="Account" IconType="key">
				<LoginDisplay />
			</NavDropdown>
			<AuthorizeView>
				<Authorized>
					<NavDropdown Text="Profile" IconType="person">
						@if (_playerId.HasValue)
						{
							<NavItem Href="@($"leaderboard/player/{_playerId}")" IconType="person" Text="View" />
						}

						<NavItem Href="profile/edit" IconType="pencil" Text="Edit" />
					</NavDropdown>
					@if (_roles.Count > 0)
					{
						@if (_roles.Contains(Roles.Admin))
						{
							<NavDropdown Text="Monitoring" IconType="monitor">
								<NavItem Href="admin/background-services" IconType="monitor" Text="Background Services" />
								<NavItem Href="admin/caches" IconType="monitor" Text="Caches" />
								<NavItem Href="admin/database" IconType="monitor" Text="Database" />
								<NavItem Href="admin/file-system" IconType="monitor" Text="File System" />
								<NavItem Href="admin/health" IconType="monitor" Text="Health" />
							</NavDropdown>
						}

						<NavDropdown Text="Admin" IconType="shield">
							@if (_roles.Contains(Roles.Admin))
							{
								<NavItem Href="admin/tools/add-distribution" IconType="pencil" Text="Add Tool" />
								<NavItem Href="admin/custom-entries" IconType="ellipses" Text="Custom Entries" />
								<NavItem Href="admin/donations" IconType="heart" Text="Donations" />
							}
							@if (_roles.Contains(Roles.CustomLeaderboards))
							{
								<NavItem Href="admin/custom-leaderboards" IconType="list" Text="Custom Leaderboards" />
							}
							@if (_roles.Contains(Roles.Mods))
							{
								<NavItem Href="admin/mods" IconType="brush" Text="Mods" />
							}
							@if (_roles.Contains(Roles.Players))
							{
								<NavItem Href="admin/players" IconType="people" Text="Players" />
								<NavItem Href="admin/users" IconType="person" Text="Users" />
							}
							@if (_roles.Contains(Roles.Spawnsets))
							{
								<NavItem Href="admin/spawnsets" IconType="grid-three-up" Text="Spawnsets" />
							}
						</NavDropdown>
					}
				</Authorized>
			</AuthorizeView>
			<NavItem Href="donations" IconType="heart" Text="Donations" />
			<NavItem Href="news" IconType="document" Text="News" />
			<NavItem Href="swagger/index.html" IconType="link-intact" Text="API" />
		</CascadingValue>
	</ul>
</div>

@code
{
	private List<string> _roles = new();
	private int? _playerId;

	public bool ShowNavMenuMobile { get; set; } = false;

	public bool ExpandNavMenu { get; set; } = false;

	public List<NavDropdown> NavDropdowns { get; } = new();

	protected override async Task OnInitializedAsync()
	{
		AuthenticationState auth = await Auth.GetAuthenticationStateAsync();
		_roles = auth.User?.GetRoles() ?? new();
		_playerId = auth.User?.GetPlayerId();
	}

	public void SetActive(NavDropdown? navDropdown)
	{
		foreach (NavDropdown nd in NavDropdowns)
			nd.IsActive = navDropdown == nd;
	}

	public void ShowSubMenu(NavDropdown navDropdown)
	{
		foreach (NavDropdown nd in NavDropdowns)
			nd.ShowList = navDropdown == nd;
	}

	public void UpdateState()
	{
		StateHasChanged();
	}

	private void OnMouseOver(MouseEventArgs mouseEvent)
	{
		if (ExpandNavMenu)
			return;

		ExpandNavMenu = true;
		StateHasChanged();
	}

	private void OnMouseOut(MouseEventArgs mouseEvent)
	{
		if (!ExpandNavMenu)
			return;

		ExpandNavMenu = false;
		StateHasChanged();
	}

	public string? GetOpacityClass()
	{
		if (ExpandNavMenu)
			return "opacity-100";

		if (ShowNavMenuMobile)
			return "opacity-100 sm:opacity-0";

		return "opacity-0";
	}
}
